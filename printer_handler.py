import os
import logging
import re
import textwrap
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont, ImageChops, ImageWin
from gs1_datamatrix import GS1DataMatrixGenerator
# import win32print
# import win32ui
import code128
# –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Ñ–∞–π–ª printer_handler.py, —Ç–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º, —á—Ç–æ–±—ã –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ win32print, win32ui,
# –Ω–æ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –∏ –≤—Å–µ –º–µ—Ç–æ–¥—ã —Å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏ –æ—Å—Ç–∞–ª–∏—Å—å, –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å —Ä–∞–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–º –∫–æ–¥–æ–º –∏–∑–≤–Ω–µ
# –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø ZPL –ü–ï–ß–ê–¢–ò
import socket
import base64
from typing import Optional, Dict

# === –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ===
logging.basicConfig(
    filename="debug_log.txt",
    level=logging.DEBUG,
    format="%(asctime)s %(message)s",
    datefmt="[%Y-%m-%d %H:%M:%S]"
)

def log(msg):
    logging.info(msg)
    print(f"[DEBUG] {msg}")


class LabelPrinter:
    def __init__(self, printer_name='–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é'): #'XPriner 365B'
        self.printer_name = printer_name
        self.MM_TO_PIXELS = 3.78  # ~1 –º–º ‚âà 3.78 –ø–∏–∫—Å–µ–ª–µ–π –ø—Ä–∏ 96 dpi
        self.label_size_mm = (58, 40)  # —Ä–∞–∑–º–µ—Ä —ç—Ç–∏–∫–µ—Ç–∫–∏ –≤ –º–º
        self.RAW_PRINTER_PORT = 9100  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–æ—Ä—Ç –¥–ª—è RAW –ø–µ—á–∞—Ç–∏ ZPL

        # –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä—è–º–∞—è –ø–µ—á–∞—Ç—å ZPL —á–µ—Ä–µ–∑ —Å–µ—Ç—å
    def print_zpl_network(self, zpl_code: str, host: str, port: int = 9100) -> bool:
        """
        –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è –ø—Ä—è–º–∞—è –ø–µ—á–∞—Ç—å ZPL-–∫–æ–¥–∞ –Ω–∞ —Å–µ—Ç–µ–≤–æ–π –ø—Ä–∏–Ω—Ç–µ—Ä —á–µ—Ä–µ–∑ TCP-—Å–æ–∫–µ—Ç.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Wildberries –∏ Ozon FBS —ç—Ç–∏–∫–µ—Ç–æ–∫.
        """
        try:
            print(f"üñ®Ô∏è –û—Ç–ø—Ä–∞–≤–∫–∞ ZPL –Ω–∞ —Å–µ—Ç–µ–≤–æ–π –ø—Ä–∏–Ω—Ç–µ—Ä {host}:{port}...")
            s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
            s.settimeout(5)  # –¢–∞–π–º–∞—É—Ç –Ω–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
            s.connect((host, port))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º ZPL-–∫–æ–¥ –∫–∞–∫ –±–∞–π—Ç—ã
            s.sendall(zpl_code.encode('utf-8'))
            s.close()
            print("‚úÖ ZPL-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø–µ—á–∞—Ç—å.")
            return True
        except socket.error as e:
            # –ü—Ä–∏–Ω—Ç–µ—Ä XPriner 365B –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ —Ä–∞–±–æ—Ç—É –ø–æ —Å–µ—Ç–∏ (Ethernet)
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ç–µ–≤–æ–π –ø–µ—á–∞—Ç–∏: {e}. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ IP, –ø–æ—Ä—Ç –∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–Ω—Ç–µ—Ä–∞.")
            return False
        except Exception as e:
            print(f"‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ ZPL –ø–µ—á–∞—Ç–∏: {e}")
            return False

    # –ù–û–í–´–ô –ú–ï–¢–û–î: –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è –ø–µ—á–∞—Ç–∏ WB/Ozon —ç—Ç–∏–∫–µ—Ç–æ–∫
    def print_wb_ozon_label(self, label_base64_data: str, printer_host: str, printer_port: int = 9100):
        """
        –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞. –î–µ–∫–æ–¥–∏—Ä—É–µ—Ç Base64 –¥–∞–Ω–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ (–ø—Ä–µ–¥–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ ZPL) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø–µ—á–∞—Ç—å.
        """
        try:
            # –î–µ–∫–æ–¥–∏—Ä—É–µ–º Base64. ZPL-–¥–∞–Ω–Ω—ã–µ —á–∞—Å—Ç–æ –ø—Ä–∏—Ö–æ–¥—è—Ç –≤ —Ç–∞–∫–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–µ.
            decoded_zpl_code = base64.b64decode(label_base64_data).decode('utf-8')

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –ø–µ—á–∞—Ç—å
            success = self.print_zpl_network(decoded_zpl_code, printer_host, printer_port)
            return success
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è –∏–ª–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ ZPL: {e}")
            return False

    # --- –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –º–µ—Ç–æ–¥—ã –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞ ---
    def create_ozon_label(self, barcode_value, product_infos, font, height=200, font_size=14,
                      left_padding=50, right_padding=50, padding=10, bottom_padding=20):
        log("–ù–∞—á–∞–ª–æ create_ozon_label()")

        try:
            # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞ –≤ –ø–∞–º—è—Ç–∏ ---
            log("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞...")
            barcode_img = code128.image(barcode_value, height=height, thickness=2)
            log(f"–®—Ç—Ä–∏—Ö-–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω (—Ä–∞–∑–º–µ—Ä: {barcode_img.size})")

            # --- –û–±—Ä–µ–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ ---
            def trim(img):
                log("–û–±—Ä–µ–∑–∫–∞ —à—Ç—Ä–∏—Ö-–∫–æ–¥–∞...")
                img = img.convert("RGB")
                bg = Image.new("RGB", img.size, img.getpixel((0, 0)))
                diff = ImageChops.difference(img, bg)
                bbox = diff.getbbox()
                if bbox:
                    log(f"trim: bbox –Ω–∞–π–¥–µ–Ω: {bbox}")
                    return img.crop(bbox)
                else:
                    log("trim: bbox –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –æ–±—Ä–µ–∑–∞–Ω–æ")
                    return img

            trimmed_barcode = trim(barcode_img)

            # --- –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞ ---
            log("–ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—å DejaVuSans.ttf...")
            try:
                font_path = "DejaVuSans.ttf"
                if not os.path.exists(font_path):
                    log(f"‚ùå –§–∞–π–ª —à—Ä–∏—Ñ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {os.path.abspath(font_path)}")
                font = ImageFont.truetype(font_path, font_size)
                log(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω —à—Ä–∏—Ñ—Ç: {font_path}")
            except OSError as e:
                log(f"‚ùå OSError: {e}")
                log("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç")
                font = ImageFont.load_default()

            log(f"–¢–∏–ø —à—Ä–∏—Ñ—Ç–∞: {type(font)}")

            # --- –†–∞—Å—á—ë—Ç —Ä–∞–∑–º–µ—Ä–æ–≤ —Ç–µ–∫—Å—Ç–∞ ---
            log("–†–∞—Å—á—ë—Ç —à–∏—Ä–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞...")
            draw_temp = ImageDraw.Draw(Image.new("RGB", (1, 1)))

            text_widths = []
            for line in product_infos:
                log(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç—Ä–æ–∫–∏: '{line}'")
                try:
                    w = int(draw_temp.textlength(line, font=font))
                    log(f"–°—Ç—Ä–æ–∫–∞: '{line}' ‚Üí —à–∏—Ä–∏–Ω–∞: {w} px (—á–µ—Ä–µ–∑ textlength)")
                except Exception as e:
                    log(f"‚ùå –°—Ç—Ä–æ–∫–∞: '{line}' ‚Üí –æ—à–∏–±–∫–∞ textlength(): {e}")
                    avg_char_width = font_size * 0.6
                    w = int(len(line) * avg_char_width)
                    log(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏–±–ª–∏–∑–∏—Ç–µ–ª—å–Ω—ã–π —Ä–∞—Å—á—ë—Ç: {len(line)} —Å–∏–º–≤–æ–ª–æ–≤ * {avg_char_width:.2f} ‚âà {w} px")
                text_widths.append(w)

            text_max_width = max(text_widths)
            text_total_height = len(product_infos) * font_size + (len(product_infos) - 1) * 5
            log(f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —à–∏—Ä–∏–Ω–∞ —Ç–µ–∫—Å—Ç–∞: {text_max_width}")
            log(f"–í—ã—Å–æ—Ç–∞ —Ç–µ–∫—Å—Ç–∞: {text_total_height}")

            # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤ —ç—Ç–∏–∫–µ—Ç–∫–∏ —Å —É—á—ë—Ç–æ–º –≤—Å–µ—Ö –æ—Ç—Å—Ç—É–ø–æ–≤ ---
            final_width = max(
                trimmed_barcode.width + left_padding + right_padding,
                text_max_width + left_padding + right_padding
            )
            final_height = (
                trimmed_barcode.height +
                padding +
                text_total_height +
                bottom_padding
            )

            final_width = int(final_width)
            final_height = int(final_height)
            log(f"–°–æ–∑–¥–∞–Ω–∏–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ —Ä–∞–∑–º–µ—Ä–æ–º {final_width}x{final_height} —Å –æ—Ç—Å—Ç—É–ø–∞–º–∏: "
                f"—Å–ª–µ–≤–∞={left_padding}, —Å–ø—Ä–∞–≤–∞={right_padding}, —Å–≤–µ—Ä—Ö—É={padding}, —Å–Ω–∏–∑—É={bottom_padding}")

            # --- –°–æ–∑–¥–∞—ë–º —Ñ–æ–Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ---
            etiketka = Image.new("RGB", (final_width, final_height), "white")
            draw = ImageDraw.Draw(etiketka)

            # --- –í—Å—Ç–∞–≤–ª—è–µ–º —à—Ç—Ä–∏—Ö-–∫–æ–¥ ---
            barcode_x = left_padding
            barcode_y = padding
            etiketka.paste(trimmed_barcode, (barcode_x, barcode_y))
            log("–®—Ç—Ä–∏—Ö-–∫–æ–¥ –≤—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

            # --- –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç ---
            text_y = barcode_y + trimmed_barcode.height + padding
            for line in product_infos:
                draw.text((left_padding, text_y), line, fill="black", font=font)
                log(f"–î–æ–±–∞–≤–ª–µ–Ω —Ç–µ–∫—Å—Ç: '{line}' (y={text_y})")
                text_y += font_size + 5

            log("‚úÖ –≠—Ç–∏–∫–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
            return etiketka

        except Exception as e:
            log(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            raise

    def convert_to_gs1_format(self, raw_string):
        parts = raw_string.strip().split()
        result = ""
        for i, part in enumerate(parts):
            if part.startswith("01") and len(part) >= 16:
                # GTIN: 01 + 14 —Å–∏–º–≤–æ–ª–æ–≤
                gtin = part[2:16]
                result += f"(01){gtin}"

                # –û—Å—Ç–∞—Ç–æ–∫ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ GTIN ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä, '215rzB=majxtZvc'
                rest = part[16:]
                if rest:
                    if rest.startswith("21") and len(rest) > 2:
                        serial = rest[2:]
                        result += f"(21){serial}"
                    else:
                        result += rest  # –µ—Å–ª–∏ –Ω–µ—Ç AI, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–∫ –¥–∞–Ω–Ω—ã–µ

            elif part.startswith("21"):
                serial = part[2:]
                result += f"(21){serial}"

            elif part.startswith("91"):
                data = part[2:]
                result += f"(91){data}"

            elif part.startswith("92"):
                data = part[2:]
                result += f"(92){data}"
        return result

    def is_correct_gs1_format(self, raw_string):
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –æ–±—ä–µ–¥–∏–Ω—è–µ–º
        full_data = ''.join(raw_string.strip().split())
        
        # –¢–∞–±–ª–∏—Ü–∞ AI —Å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –¥–ª–∏–Ω–æ–π –¥–∞–Ω–Ω—ã—Ö
        ai_table = {
            '01': 14,   # GTIN
            '02': 14,   # GTIN –¥–ª—è –ø–∞—Ä—Ç–∏–∏
            '10': None, # –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä –ø–∞—Ä—Ç–∏–∏ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ AI)
            '17': 6,    # –°—Ä–æ–∫ –≥–æ–¥–Ω–æ—Å—Ç–∏ (YYMMDD)
            '21': None, # –°–µ—Ä–∏–π–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–æ–≤–∞—Ä–∞ (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞)
            '310': 6,   # Net weight in kg with 3 decimals (e.g. 3100012345)
            '37': None, # Quantity (–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞)
            '91': None, # –í–Ω—É—Ç—Ä–µ–Ω–Ω–µ–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
            '92': None, # –ó–∞—â–∏—â—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            '93': None,
            '94': None,
            '95': None,
            '96': None,
            '97': None,
            '98': None,
            '99': None,
        }

        current_pos = 0
        data_length = len(full_data)

        while current_pos < data_length:
            matched = False

            for ai in ai_table:
                if full_data.startswith(ai, current_pos):
                    data_length_ai = ai_table[ai]
                    remaining_length = data_length - current_pos - len(ai)

                    if data_length_ai is not None:
                        # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è
                        if remaining_length >= data_length_ai:
                            current_pos += len(ai) + data_length_ai
                            matched = True
                            break
                        else:
                            return False  # –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è AI
                    else:
                        # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª–∏–Ω–∞ ‚Äî —á–∏—Ç–∞–µ–º –¥–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ AI –∏–ª–∏ –∫–æ–Ω—Ü–∞ —Å—Ç—Ä–æ–∫–∏
                        next_ai_pos = data_length
                        for possible_ai in ai_table:
                            pos = full_data.find(possible_ai, current_pos + len(ai))
                            if pos != -1:
                                next_ai_pos = min(next_ai_pos, pos)
                        current_pos += len(ai)
                        if next_ai_pos == data_length:
                            # –ö–æ–Ω–µ—Ü —Å—Ç—Ä–æ–∫–∏ ‚Äî –≤—Å—ë —Å—á–∏—Ç–∞–Ω–æ
                            current_pos = data_length
                        else:
                            # –î–æ —Å–ª–µ–¥—É—é—â–µ–≥–æ AI
                            current_pos += next_ai_pos - (current_pos)
                        matched = True
                        break

            if not matched:
                return False  # –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å AI

        return True

    def generate_gs1_datamatrix_from_raw(
        self,
        raw_string: str,
        description_text: list,
        logo_path: str = "assets/icons/chestniy_znak.png",
        output_path: str = "etiketka_chestnyi_znak.png",
        label_size: tuple = (450, 280),
        padding: int = 20,
        font_size: int = 14,
    ):
        width, height = label_size
        etiketka = Image.new("RGB", (width, height), "white")
        draw = ImageDraw.Draw(etiketka)

        # --- –®—Ä–∏—Ñ—Ç ---
        try:
            font = ImageFont.truetype("DejaVuSans.ttf", font_size)
        except OSError:
            font = ImageFont.load_default()

        # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ ---
        if not self.is_correct_gs1_format(raw_string):
            raise ValueError("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ö–æ–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏")

        # --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è DataMatrix ---
        matrixGenerator = GS1DataMatrixGenerator()
        datamatrix = matrixGenerator.generate_from_string(raw_string)
        dm_image = datamatrix.resize((200, 200)).convert("RGB")

        # --- –í—Å—Ç–∞–≤–∫–∞ DataMatrix ---
        dm_x = padding
        dm_y = padding
        etiketka.paste(dm_image, (dm_x, dm_y))

        # --- –ü–æ–¥–ø–∏—Å—å –ø–æ–¥ DataMatrix ---
        code_text = raw_string[:31]
        bbox = draw.textbbox((0, 0), code_text, font=font)
        text_height = bbox[3] - bbox[1]
        draw.text((dm_x, dm_y + dm_image.height + 10), code_text, fill="black", font=font)

        # --- –õ–æ–≥–æ—Ç–∏–ø —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É ---
        if os.path.exists(logo_path):
            logo = Image.open(logo_path).convert("RGBA")
            logo.thumbnail((100, 100))
            logo_x = width - logo.width - padding
            logo_y = padding
            etiketka.paste(logo, (logo_x, logo_y), logo.split()[3])
        else:
            print(f"[!] –õ–æ–≥–æ—Ç–∏–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: {logo_path}")

        # --- –û–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ —Å–ø—Ä–∞–≤–∞ –æ—Ç –∫–æ–¥–∞ ---
        desc_x = dm_x + dm_image.width + 20
        desc_y_start = dm_y + 60

        for line in description_text:
            wrapped_lines = textwrap.wrap(line, width=30)
            for wrapped_line in wrapped_lines:
                draw.text((desc_x, desc_y_start), wrapped_line, fill="black", font=font)
                desc_y_start += font_size + 4

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç ---
        # etiketka.save(output_path)
        print(f"‚úÖ –≠—Ç–∏–∫–µ—Ç–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –∫–∞–∫ '{output_path}'")
        return etiketka

        # ----------------------------------------------
        # 1. –ù–û–í–´–ô –í–ù–£–¢–†–ï–ù–ù–ò–ô –ú–ï–¢–û–î: –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ZPL ^GFA
        # ----------------------------------------------

    def _img_to_zpl_hex(self, img: Image.Image) -> str:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç PIL.Image –≤ ASCII Hex —Å—Ç—Ä–æ–∫—É,
        –ø–æ–¥—Ö–æ–¥—è—â—É—é –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ZPL ^GFA.
        """
        # 1. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ –º–æ–Ω–æ—Ö—Ä–æ–º–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Ç–µ—Ä–º–æ–ø—Ä–∏–Ω—Ç–µ—Ä–∞
        img = img.convert("L").convert("1", dither=Image.Dither.FLOYDSTEINBERG)

        width_bytes = int(img.width / 8)
        if img.width % 8 != 0:
            width_bytes += 1

        width_in_bytes = width_bytes
        height = img.height

        # 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –±–∞–π—Ç–æ–≤ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ASCII Hex
        temp_buffer = BytesIO()
        img.save(temp_buffer, format='PNG', optimize=True)
        temp_buffer.seek(0)

        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∏—Ç–æ–≤–æ–π –∫–∞—Ä—Ç—ã (raw image data)
        zpl_hex = ""
        for y in range(height):
            byte_val = 0
            for x in range(img.width):
                pixel = img.getpixel((x, y))
                byte_val = byte_val << 1
                if pixel == 0:  # –ß–µ—Ä–Ω—ã–π –ø–∏–∫—Å–µ–ª—å
                    byte_val |= 1

                if (x + 1) % 8 == 0 or (x + 1) == img.width:
                    zpl_hex += f"{byte_val:02X}"
                    byte_val = 0

        # 3. ZPL-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã ^GFA
        # ^XA - –Ω–∞—á–∞–ª–æ —Ñ–æ—Ä–º–∞—Ç–∞
        # ^FOx,y - –ø–æ–ª–µ –ø—Ä–æ–∏—Å—Ö–æ–∂–¥–µ–Ω–∏—è (–ø–æ–∑–∏—Ü–∏—è –ø–µ—á–∞—Ç–∏)
        # ^GFA - –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç ASCII
        #   A - data_compression_method (A=ASCII)
        #   h - total_data_bytes
        #   w - width_in_bytes
        #   l - height
        #   data - ASCII data
        # ^FS - –∫–æ–Ω–µ—Ü –ø–æ–ª—è
        # ^XZ - –∫–æ–Ω–µ—Ü —Ñ–æ—Ä–º–∞—Ç–∞

        total_data_bytes = len(zpl_hex) // 2

        zpl_command = textwrap.dedent(f"""
               ^XA
               ^FO0,0^GFA,{total_data_bytes},{total_data_bytes},{width_in_bytes},{zpl_hex}^FS
               ^XZ
           """).strip()

        return zpl_command

        # ----------------------------------------------
        # 2. –ó–ê–ú–ï–ù–ê WINDOWS-–°–ü–ï–¶–ò–§–ò–ß–ù–û–ì–û print_on_windows
        # ----------------------------------------------

    def print_on_windows(self, image_path: Optional[str] = None, image: Optional[Image.Image] = None,
                         printer_host: Optional[str] = None):
        """
        –ö—Ä–æ—Å—Å–ø–ª–∞—Ç—Ñ–æ—Ä–º–µ–Ω–Ω–∞—è –∑–∞–º–µ–Ω–∞ print_on_windows.
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ/—Ñ–∞–π–ª –≤ ZPL (^GFA) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø–µ—á–∞—Ç—å.
        –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏.
        """
        log("–ú–µ—Ç–æ–¥ print_on_windows –≤—ã–∑–≤–∞–Ω. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ZPL ^GFA...")

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º IP –ø—Ä–∏–Ω—Ç–µ—Ä–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π)
        host = printer_host if printer_host else self.PRINTER_HOST

        if image_path:
            # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞
            try:
                img = Image.open(image_path)
            except FileNotFoundError:
                log(f"‚ùå –û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {image_path}")
                return
            except Exception as e:
                log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞: {e}")
                return
        elif image:
            # 2. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç Image
            img = image
        else:
            log("‚ùå –û—à–∏–±–∫–∞: –ù–µ –ø–µ—Ä–µ–¥–∞–Ω–æ –Ω–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–æ–±—ä–µ–∫—Ç), –Ω–∏ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É.")
            return

        # 3. –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤ ZPL
        try:
            zpl_code = self._img_to_zpl_hex(img)
            log(f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ –≤ ZPL (^GFA). –î–ª–∏–Ω–∞ ZPL: {len(zpl_code)} –±–∞–π—Ç.")
        except Exception as e:
            log(f"‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ ZPL: {e}")
            return

        # 4. –û—Ç–ø—Ä–∞–≤–∫–∞ ZPL –Ω–∞ –ø–µ—á–∞—Ç—å
        success = self.print_zpl_network(zpl_code, host, self.RAW_PRINTER_PORT)

        if success:
            log(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø–µ—á–∞—Ç—å –Ω–∞ {host} (—á–µ—Ä–µ–∑ ZPL ^GFA).")
        else:
            log(f"‚ùå –ü–µ—á–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–∞ {host} –Ω–µ —É–¥–∞–ª–∞—Å—å.")

    # ----------------------------------------------
    # def print_on_windows_old(self, image_path=None, image=None):
    #     """
    #     –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–±–∞–≤–∏—Ç—å—Å—è –æ—Ç —ç—Ç–æ–≥–æ –º–µ—Ç–æ–¥–∞ –∏ –ø—Ä–∏–≤—è–∑–∫–µ –∫ Windows !!!!
    #     –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —ç—Ç–∏–∫–µ—Ç–∫–∏ –Ω–∞ –ø–µ—á–∞—Ç—å.
    #     –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –ª–∏–±–æ –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É, –ª–∏–±–æ –æ–±—ä–µ–∫—Ç PIL.Image.
    #     """
    #     temp_path = None
    #     if image is not None:
    #         temp_path = "__temp_label_print__.png"
    #         image.save(temp_path)
    #         image_path = temp_path
    #
    #     try:
    #         printer_name = self.printer_name if self.printer_name != '–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é' else win32print.GetDefaultPrinter()
    #         print(f"üñ®Ô∏è –ü–µ—á–∞—Ç—å –Ω–∞ –ø—Ä–∏–Ω—Ç–µ—Ä–µ: {printer_name}")
    #
    #         hprinter = win32print.OpenPrinter(printer_name)
    #         try:
    #             win32print.StartDocPrinter(hprinter, 1, ("–≠—Ç–∏–∫–µ—Ç–∫–∞", None, "RAW"))
    #             win32print.StartPagePrinter(hprinter)
    #
    #             bmp = Image.open(image_path)
    #             dib = ImageWin.Dib(bmp)
    #
    #             hdc = win32ui.CreateDC()
    #             hdc.CreatePrinterDC(printer_name)
    #             hdc.StartDoc("–≠—Ç–∏–∫–µ—Ç–∫–∞")
    #             hdc.StartPage()
    #             dib.draw(hdc.GetHandleOutput(), (0, 0, bmp.width, bmp.height))
    #             hdc.EndPage()
    #             hdc.EndDoc()
    #             hdc.DeleteDC()
    #
    #             win32print.EndPagePrinter(hprinter)
    #             win32print.EndDocPrinter(hprinter)
    #         finally:
    #             win32print.ClosePrinter(hprinter)
    #
    #         if temp_path and os.path.exists(temp_path):
    #             os.remove(temp_path)
    #
    #     except Exception as e:
    #         print("‚ùå –û—à–∏–±–∫–∞ –ø–µ—á–∞—Ç–∏:", str(e))

    # --- API –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —ç—Ç–∏–∫–µ—Ç–∫–∞–º–∏ ---
    def print_ozon_label(self, barcode_value, product_info):
        """–°–æ–∑–¥–∞—ë—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç —ç—Ç–∏–∫–µ—Ç–∫—É Ozon"""
        label = self.create_ozon_label(barcode_value, product_info, 'DejaVuSans.ttf')
        self.print_on_windows(image=label)

    def print_gs1_label(self, raw_string, description_text):
        """–°–æ–∑–¥–∞—ë—Ç –∏ –ø–µ—á–∞—Ç–∞–µ—Ç GS1 —ç—Ç–∏–∫–µ—Ç–∫—É"""
        label = self.generate_gs1_datamatrix_from_raw(raw_string, description_text)
        self.print_on_windows(image=label)


if __name__ == "__main__":
    printer = LabelPrinter(printer_name="–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")  # –∏–ª–∏ "–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"
    printer.print_ozon_label("432432432423", ["fdsfsdf"])
