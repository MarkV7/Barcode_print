import os
import tkinter as tk
import customtkinter as ctk
import pandas as pd
from tkinter import messagebox
from gui.gui_table import EditableDataTable
from sound_player import play_success_scan_sound, play_unsuccess_scan_sound
from printer_handler import LabelPrinter


class WildberriesMode(ctk.CTkFrame):
    def __init__(self, parent, font, app_context):
        super().__init__(parent)
        self.font = font
        self.app_context = app_context
        self.editing = False
        self.focus_timer_id = None
        self.clear_timer_id = None
        self.scan_entry = None
        self.marking_code_entry = None  # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        self.current_product = None  # –•—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
        self.setup_ui()

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if self.app_context.fbo_table_wb is not None and not self.app_context.fbo_table_wb.empty:
            self.fbo_df = self.app_context.fbo_table_wb.copy()
        else:
            self.fbo_df = pd.DataFrame(columns=["–ê—Ä—Ç–∏–∫—É–ª –í–∞–π–ª–¥–±–µ—Ä–∏–∑", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"])

        self.update_table()

    def setup_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(
            self,
            text="–§–ë–û –í–∞–π–ª–¥–±–µ—Ä–∏–∑",
            font=ctk.CTkFont(size=20, weight="bold"),
            anchor="w"
        )
        self.title_label.place(relx=0.0, rely=0.0, anchor="nw", x=10, y=5)

        # –°–∫—Ä—ã—Ç—ã–π Entry –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_entry = ctk.CTkEntry(self, width=200, height=1, border_width=0)
        self.scan_entry.pack(pady=0, padx=0)
        self.scan_entry.bind("<KeyRelease>", self.reset_clear_timer)
        self.scan_entry.bind("<Return>", self.handle_barcode)
        self.scan_entry.bind("<FocusIn>", self.on_entry_focus_in)
        self.scan_entry.bind("<FocusOut>", self.on_entry_focus_out)
        self.scan_entry.bind("<KeyPress>", self.handle_keypress)
        self.restore_entry_focus()

        # –ú–µ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_frame = ctk.CTkFrame(self, fg_color="transparent")
        status_frame.pack(fill="x", pady=(10, 0))
        self.scanning_label = ctk.CTkLabel(
            status_frame,
            text="–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è... üì±",
            font=("Segoe UI", 16, "bold"),
            anchor="center"
        )
        self.scanning_label.pack()

        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ —á–µ—Å—Ç–Ω–æ–≥–æ –∑–Ω–∞–∫–∞
        self.marking_code_entry = ctk.CTkEntry(self, placeholder_text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏...", width=300)
        self.marking_code_entry.pack(pady=10)
        self.marking_code_entry.focus_set()
        self.marking_code_entry.lower()
        self.marking_code_entry.bind("<Return>", self.handle_marking_code)
        self.marking_code_entry.bind("<FocusOut>", self.handle_marking_code)

        self.product_info_label = ctk.CTkLabel(
            self,
            text="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–æ–≤–∞—Ä–µ",
            font=("Segoe UI", 14),
            anchor="e",
            corner_radius=5,
            fg_color="gray85",
            text_color="gray20",
        )
        self.product_info_label.pack()
        self.product_info_label.lower()

        # –ñ—É—Ä–Ω–∞–ª —Å–ø—Ä–∞–≤–∞ —Å–≤–µ—Ä—Ö—É
        self.log_label = ctk.CTkLabel(
            self,
            text="",
            font=("Segoe UI", 14),
            anchor="e",
            padx=10,
            pady=5,
            corner_radius=5,
            fg_color="gray85",
            text_color="gray20",
        )
        self.log_label.place(relx=1.0, rely=0.0, anchor="ne", x=-15, y=15)
        self.log_label.lower()

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
        self.table_container = ctk.CTkFrame(self)
        self.table_container.pack(fill="both", expand=True, padx=20, pady=10)

    def handle_keypress(self, event):
        if self.table:
            self.table.on_keypress(event)

    def reset_clear_timer(self, event=None):
        if self.clear_timer_id:
            self.after_cancel(self.clear_timer_id)
        self.clear_timer_id = self.after(300, self.scan_entry.delete, 0, "end")

    def restore_entry_focus(self, event=None):
        if self.editing:
            return
        self.scan_entry.focus_set()
        self.focus_timer_id = self.after(100, self.restore_entry_focus)

    def on_entry_focus_in(self, event=None):
        if not self.editing:
            self.scanning_label.configure(text="–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è... üì±")

    def on_entry_focus_out(self, event=None):
        if not self.editing:
            self.scanning_label.configure(text="")

    def handle_barcode(self, event=None):
        barcode = self.scan_entry.get().strip()
        self.scan_entry.delete(0, "end")
        if not barcode:
            return
        if self.app_context.df is None:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.")
            return

        # –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–∞ –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
        founded_row = self.app_context.df[self.app_context.df["–®—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"].astype(str) == barcode]
        if founded_row.empty:
            play_unsuccess_scan_sound()
            self.show_log("‚ö†Ô∏è –®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω", bg_color="#FFE0E0", text_color="red")
            return

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Ç–æ–≤–∞—Ä
        self.current_product = founded_row.iloc[0]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Ç–æ–≤–∞—Ä –µ—Å—Ç—å –Ω–∞ Wildberries
        if pd.isna(self.current_product.get('–ë–∞—Ä–∫–æ–¥  Wildberries')) or not self.current_product.get('–ë–∞—Ä–∫–æ–¥  Wildberries'):
            play_unsuccess_scan_sound()
            self.show_log("‚ö†Ô∏è –£ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –±–∞—Ä–∫–æ–¥–∞ Wildberries", bg_color="#FFE0E0", text_color="red")
            return

        if pd.isna(self.current_product.get('–ê—Ä—Ç–∏–∫—É–ª –í–∞–π–ª–¥–±–µ—Ä–∏–∑')) or not self.current_product.get('–ê—Ä—Ç–∏–∫—É–ª –í–∞–π–ª–¥–±–µ—Ä–∏–∑'):
            self.show_log("‚ö†Ô∏è –£ –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–µ—Ç –∞—Ä—Ç–∏–∫—É–ª–∞ Wildberries", bg_color="#FFE0E0", text_color="red")
            return

        play_success_scan_sound()
        self.show_log("‚úÖ –ö–æ–¥ –ø—Ä–∏–Ω—è—Ç", bg_color="#E0FFE0", text_color="green")

        product_info = (
            f"{self.current_product['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è']} | "
            f"{self.current_product['–†–∞–∑–º–µ—Ä']} | "
            f"{self.current_product['–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']} | "
            f"{self.current_product['–ê—Ä—Ç–∏–∫—É–ª –í–∞–π–ª–¥–±–µ—Ä–∏–∑']}"
        )

        # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–≤–æ–¥ –∫–æ–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
        self.await_marking_code(product_info)

    def await_marking_code(self, product_info):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –ø–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –∫–æ–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        self.marking_code_entry.lift()
        self.marking_code_entry.focus()
        self.scanning_label.configure(text="–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —á–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫:")
        self.scanning_label.lift()
        self.product_info_label.configure(text=product_info)
        self.product_info_label.lift()
        self.on_edit_start()

    def handle_marking_code(self, event=None):
        self.on_edit_end()
        label_printer = LabelPrinter(self.app_context.printer_name)
        code = self.marking_code_entry.get().strip()

        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º
        self.scanning_label.configure(text="–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è... üì±")
        self.product_info_label.lower()
        self.marking_code_entry.delete(0, tk.END)
        self.marking_code_entry.lower()

        if not code:
            return

        if not label_printer.is_correct_gs1_format(code):
            play_unsuccess_scan_sound()
            self.show_log("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", bg_color="#FFE0E0", text_color="red")
            return

        play_success_scan_sound()
        self.scanning_label.configure(text='–ò–¥–µ—Ç —Ä–∞—Å–ø–µ—á–∞—Ç–∫–∞ —ç—Ç–∏–∫–µ—Ç–æ–∫...')
        filename = '__temp_label_print__.png'
        
        wb_id = self.current_product.get('–ë–∞—Ä–∫–æ–¥  Wildberries') or self.current_product.get('–ë–∞—Ä–∫–æ–¥ Wildberries')

        # –ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ Wildberries
        wb_product_info = [
            f"{wb_id}",
            f"{self.current_product.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '')}",
            f"–ê—Ä—Ç–∏–∫—É–ª WB: {self.current_product.get('–ê—Ä—Ç–∏–∫—É–ª –í–∞–π–ª–¥–±–µ—Ä–∏–∑', '')}"
        ]
        wb_label = label_printer.create_ozon_label(str(wb_id), wb_product_info, 'DejaVuSans.ttf', height=150)
        wb_label.save(filename)
        label_printer.print_on_windows(image_path=filename)
        label_printer.print_on_windows(image_path=filename)

        # –ü–µ—á–∞—Ç—å –ß–µ—Å—Ç–Ω–æ–≥–æ –ó–Ω–∞–∫–∞
        chestniy_znak_product_info = [
            f"{self.current_product.get('–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞', '')}",
            f"–†–∞–∑–º–µ—Ä: {self.current_product.get('–†–∞–∑–º–µ—Ä', '')}"
        ]
        chestniy_znak_label = label_printer.generate_gs1_datamatrix_from_raw(code, chestniy_znak_product_info)
        chestniy_znak_label.save(filename)
        label_printer.print_on_windows(image_path=filename)
        label_printer.print_on_windows(image_path=filename)

        os.remove(filename)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.add_or_update_table_entry(code)

        self.after(2000, lambda: self.log_label.configure(text=""))
        self.scanning_label.configure(text='–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è... üì±')
        self.show_log("‚úÖ –£—Å–ø–µ—à–Ω–æ", bg_color="#E0FFE0", text_color="green")
        play_success_scan_sound()

    def add_or_update_table_entry(self, code):
        art = self.current_product["–ê—Ä—Ç–∏–∫—É–ª –í–∞–π–ª–¥–±–µ—Ä–∏–∑"]

        matches = self.fbo_df[self.fbo_df["–ê—Ä—Ç–∏–∫—É–ª –í–∞–π–ª–¥–±–µ—Ä–∏–∑"] == art]
        if not matches.empty:
            idx = matches.index[0]
            current_count = self.fbo_df.loc[idx, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"]
            marking_codes = self.fbo_df.loc[idx, "–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"]

            try:
                current_count = int(current_count)
            except (ValueError, TypeError):
                current_count = 0

            if isinstance(marking_codes, str) and marking_codes:
                marking_codes += ", " + code
            else:
                marking_codes = code

            self.fbo_df.loc[idx, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = current_count + 1
            self.fbo_df.loc[idx, "–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"] = marking_codes
        else:
            new_row = pd.DataFrame([{
                "–ê—Ä—Ç–∏–∫—É–ª –í–∞–π–ª–¥–±–µ—Ä–∏–∑": art,
                "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ": 1,
                "–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏": code
            }])
            self.fbo_df = pd.concat([self.fbo_df, new_row], ignore_index=True)

        self.update_table()

    def update_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É"""
        if hasattr(self, 'table'):
            self.table.destroy()
        self.table = EditableDataTable(
            self.table_container,
            dataframe=self.fbo_df,
            header_font=("Segoe UI", 14, "bold"),
            cell_font=("Segoe UI", 14),
            readonly=False,
            on_edit_start=self.on_edit_start,
            on_edit_end=self.on_edit_end
        )
        self.table.pack(fill="both", expand=True)

    def on_edit_start(self):
        self.editing = True
        if self.focus_timer_id:
            self.after_cancel(self.focus_timer_id)

    def on_edit_end(self):
        self.editing = False
        self.app_context.fbo_table_wb = self.table.displayed_df.copy()
        self.fbo_df = self.table.displayed_df.copy()
        self.start_auto_focus()

    def start_auto_focus(self):
        if self.focus_timer_id:
            self.after_cancel(self.focus_timer_id)
        self.restore_entry_focus()

    def show_log(self, message, bg_color="#E0FFE0", text_color="green"):
        self._log_bg_color = bg_color
        self._log_text_color = text_color
        self.log_label.configure(text=message, text_color=text_color, fg_color=bg_color)
        self.log_label.lift()
        self.after(1500, self.animate_log_fade_out)

    def animate_log_fade_out(self, step=10, current_step=0):
        if current_step >= step:
            self.log_label.configure(text="", fg_color="#FFFFFF")
            self.log_label.lower()
            return
        bg = self.hex_to_grayscale(self._log_bg_color, factor=1 - (current_step / step))
        text = self._log_text_color if current_step < step * 0.6 else "gray70"
        self.log_label.configure(fg_color=bg, text_color=text)
        self.after(30, lambda: self.animate_log_fade_out(step, current_step + 1))

    def hex_to_grayscale(self, color, factor=1.0):
        def hex_to_rgb(h):
            h = h.lstrip('#')
            return tuple(int(h[i:i+2], 16) for i in (0, 2, 4))

        def rgb_to_hex(r, g, b):
            return f"#{r:02X}{g:02X}{b:02X}"

        try:
            r, g, b = hex_to_rgb(color)
        except ValueError:
            return "#FFFFFF"

        w_r, w_g, w_b = 255, 255, 255
        blended_r = int(r * factor + w_r * (1 - factor))
        blended_g = int(g * factor + w_g * (1 - factor))
        blended_b = int(b * factor + w_b * (1 - factor))
        return rgb_to_hex(blended_r, blended_g, blended_b)
