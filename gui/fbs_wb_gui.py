# from typing import Dict, List, Optional
import pandas as pd
# import numpy as np
import customtkinter as ctk
import os
import re
from datetime import datetime
from tkinter import messagebox
import easygui as eg
from pandas.core.interchange.dataframe_protocol import DataFrame

from sound_player import play_success_scan_sound, play_unsuccess_scan_sound
from gui.gui_table import EditableDataTable
from wildberries_fbs_api import WildberriesFBSAPI
from printer_handler import LabelPrinter

# –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞ —Å –Ω–æ–≤—ã–º–∏ –®–ö
NEW_BARCODES_FILE = "new_barcodes.csv"


class FBSModeWB(ctk.CTkFrame):
    """
    –í–∏–¥–∂–µ—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ –∑–∞–∫–∞–∑–æ–≤ Wildberries (FBS).
    –í–∫–ª—é—á–∞–µ—Ç –ª–æ–≥–∏–∫—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è, —Ä—É—á–Ω–æ–π —Å–±–æ—Ä–∫–∏, —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–æ–∫.
    """

    def __init__(self, parent, font, app_context):
        super().__init__(parent)
        self.font = font
        self.app_context = app_context
        self.pattern = r'^WB-GI-[0-9]+$'
        self.marketplace = 'Wildberries'
        self.editing = False
        self.focus_timer_id = None
        self.clear_timer_id = None
        self.current_barcode = None
        self.columns=[
                "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ë—Ä–µ–Ω–¥", "–¶–µ–Ω–∞",
                # "–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏",
                "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–†–∞–∑–º–µ—Ä",
                "–®—Ç—Ä–∏—Ö–∫–æ–¥", "–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", "–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            ]
        self.define_status = ('indefinite','new','confirm','complete','cancel')
        # --- –î–∞–Ω–Ω—ã–µ ---
        # 1. –°–æ–∑–¥–∞–µ–º —Ü–µ–ª–µ–≤–æ–π DF —Å –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–º–∏ –∫–æ–ª–æ–Ω–∫–∞–º–∏, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø—É—Å—Ç—ã–º–∏ —Å—Ç—Ä–æ–∫–∞–º–∏
        self.fbs_df = pd.DataFrame(columns=self.columns)

        if hasattr(self.app_context, "fbs_table") and self.app_context.fbs_table is not None:
            df = self.app_context.fbs_table.copy()
            # self.debug_print_first_row(df)
            # 2. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ Wildberries
            filtered_df = df[
                df['–°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'].astype(str).str.contains(self.marketplace, na=False)
            ].copy()

            # 3. –í—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∫–æ–ª–æ–Ω–∫–∏ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ DF –ø–æ —Ü–µ–ª–µ–≤—ã–º –∫–æ–ª–æ–Ω–∫–∞–º.
            #    –ö–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω–µ—Ç –≤ filtered_df, –±—É–¥—É—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω—ã NaN (–∏–ª–∏ '')
            #    –ú—ã –∏—Å–ø–æ–ª—å–∑—É–µ–º reindex, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å, —á—Ç–æ –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏–º–µ—é—Ç –Ω—É–∂–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏
            if not filtered_df.empty:
                # –ë–µ—Ä–µ–º —Ç–æ–ª—å–∫–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ self.columns
                existing_cols_in_filtered_df = [col for col in self.columns if col in filtered_df.columns]

                # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π DF, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ç–æ–ª—å–∫–æ –ø–æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º –∫–æ–ª–æ–Ω–∫–∞–º
                temp_df = filtered_df[existing_cols_in_filtered_df].copy()

                # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ–º –∏–Ω–¥–µ–∫—Å
                self.fbs_df = temp_df.reindex(columns=self.columns)

                # üí° –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï WARNING 1: –ü—Ä–∏–≤–æ–¥–∏–º –≤—Å–µ –∫–æ–ª–æ–Ω–∫–∏ –∫ —Å—Ç—Ä–æ–∫–æ–≤–æ–º—É —Ç–∏–ø—É –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ–º
                # –≠—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å —Å—Ç—Ä–æ–∫–∏ –∏ NaN, —É—Å—Ç—Ä–∞–Ω—è—è FutureWarning.
                for col in self.fbs_df.columns:
                    self.fbs_df[col] = self.fbs_df[col].astype(object)

                # Pandas –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∑–∞–ø–æ–ª–Ω—è–µ—Ç –Ω–æ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ NaN. –ó–∞–º–µ–Ω—è–µ–º NaN –Ω–∞ –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
                self.fbs_df.fillna('', inplace=True)

            # 4. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            #    (–≠—Ç–æ—Ç —Å—Ç–∞—Ç—É—Å –º–æ–≥ –±—ã—Ç—å –ø–æ—Ç–µ—Ä—è–Ω –ø—Ä–∏ reindex, –µ—Å–ª–∏ –æ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–ª –≤ –∏—Å—Ö–æ–¥–Ω–æ–º DF,
            #    –Ω–æ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã)
            if "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏" in self.fbs_df.columns:
                # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤ '–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏' –∑–Ω–∞—á–µ–Ω–∏–µ–º "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
                self.fbs_df["–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] = self.fbs_df["–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"].replace({'': 'indefinite', '–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω':'indefinite'})

        self.current_orders_df = None  # –ó–∞–∫–∞–∑—ã, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ –∏–∑ API
        self.wb_marking_db = self._load_new_barcodes()  # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª+—Ä–∞–∑–º–µ—Ä -> —à—Ç—Ä–∏—Ö–∫–æ–¥

        # --- API –∏ –ü—Ä–∏–Ω—Ç–µ—Ä ---
        self.api = WildberriesFBSAPI(self.app_context.wb_api_token)
        self.label_printer = LabelPrinter(self.app_context.printer_name)

        # --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Å—Ç–∞–≤–∫–∏ WB ---
        saved_supply_id = getattr(self.app_context, "wb_fbs_supply_id", "")
        self.wb_supply_id_var = ctk.StringVar(value=str(saved_supply_id))
        self.wb_supply_id_var.trace_add("write", self.update_supply_id)

        # --- UI —ç–ª–µ–º–µ–Ω—Ç—ã ---
        self.scan_entry = None
        self.cis_entry = None
        self.table_frame = None
        self.data_table = None
        self.log_label = None
        self.assembly_button = None
        self.print_button = None
        self.transfer_button = None
        self.supply_combobox = None
        self.selected_row_index = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        self.table_label = None

        self.setup_ui()

        self.show_log(f"–ü–æ–¥—Å—Ç–∞–≤–ª–µ–Ω ID –ø–æ—Å—Ç–∞–≤–∫–∏ WB: {saved_supply_id}")

    # –§—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –¥–ª—è —Ñ–∞–π–ª–∞ fbs_wb_gui.py (–≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ FBSModeWB)

    def debug_print_first_row(self,data_df:DataFrame,number_row:int=0):
        """–í—ã–≤–æ–¥–∏—Ç n-—é —Å—Ç—Ä–æ–∫—É DataFrame self.fbs_df –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö."""
        if data_df.empty:
            print("--- self.fbs_df –ø—É—Å—Ç, –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–≤–æ–¥–∞. ---")
            return
        print("\n=======================================================")
        print(f"‚úÖ DEBUG: {number_row}-—è —Å—Ç—Ä–æ–∫–∞ DataFrame self.fbs_df:")
        # .iloc[0] –±–µ–∑–æ–ø–∞—Å–Ω–æ –∏–∑–≤–ª–µ–∫–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –ø–æ —á–∏—Å–ª–æ–≤–æ–º—É –∏–Ω–¥–µ–∫—Å—É 0,
        # –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–æ–≥–æ, –∫–∞–∫–∏–µ —É DataFrame —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –∏–Ω–¥–µ–∫—Å—ã (—Å—Ç—Ä–æ–∫–æ–≤—ã–µ/—á–∏—Å–ª–æ–≤—ã–µ).
        first_row = data_df.iloc[number_row]
        # –í—ã–≤–æ–¥ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Series (–∫–æ–ª–æ–Ω–∫–∞: –∑–Ω–∞—á–µ–Ω–∏–µ)
        print(first_row)
        print("=======================================================\n")

    def _load_new_barcodes(self, filename=NEW_BARCODES_FILE) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–µ —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –∏–∑ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ CSV-—Ñ–∞–π–ª–∞."""
        if os.path.exists(filename):
            try:
                # –ß–∏—Ç–∞–µ–º —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ —Ç–∏–ø–∞–º–∏ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º DataFrame
                return pd.read_csv(filename,
                                   dtype={'–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è': str, '–®—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è': str}).fillna('')
            except Exception as e:
                self.show_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑—ã –Ω–æ–≤—ã—Ö –®–ö: {e}", is_error=True)
                return pd.DataFrame(columns=['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è', '–®—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è', '–ë–∞—Ä–∫–æ–¥ Wildberries'])
        return pd.DataFrame(columns=['–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è', '–®—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è', '–ë–∞—Ä–∫–æ–¥ Wildberries'])

    def _save_new_barcodes(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π DataFrame —Å –Ω–æ–≤—ã–º–∏ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞–º–∏."""
        try:
            self.wb_marking_db.to_csv(NEW_BARCODES_FILE, index=False, mode='w')
        except Exception as e:
            self.show_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–æ–≤—ã—Ö –®–ö: {e}", is_error=True)

    def update_supply_id(self, *args):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ ID –ø–æ—Å—Ç–∞–≤–∫–∏ (—Ä—É—á–Ω–æ–µ –∏–ª–∏ —á–µ—Ä–µ–∑ –∫–æ–º–±–æ–±–æ–∫—Å)."""
        new_id = self.wb_supply_id_var.get().strip()
        setattr(self.app_context, "wb_fbs_supply_id", new_id)
        self._update_print_button_state()
        self.show_log(f"ID –ø–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω: {new_id}")

    def setup_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å Wildberries FBS (—Ç–æ–ª—å–∫–æ WB)."""
        self.grid_columnconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=0)  # –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∞
        self.grid_rowconfigure(0, weight=1)

        # --- –õ–µ–≤–∞—è —á–∞—Å—Ç—å: –¢–∞–±–ª–∏—Ü–∞ –∏ –õ–æ–≥ ---
        main_frame = ctk.CTkFrame(self)
        main_frame.grid(row=0, column=0, sticky="nsew", padx=10, pady=10)
        main_frame.grid_rowconfigure(0, weight=1)
        main_frame.grid_columnconfigure(0, weight=1)

        # –¢–∞–±–ª–∏—Ü–∞
        self.table_frame = ctk.CTkFrame(main_frame)
        self.table_frame.grid(row=0, column=0, sticky="nsew", padx=5, pady=5)
        self.table_frame.grid_rowconfigure(0, weight=1)
        self.table_frame.grid_columnconfigure(0, weight=1)


        # –õ–æ–≥ (—Å–∞–º—ã–π –Ω–∏–∂–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç)
        self.log_label = ctk.CTkLabel(main_frame, text="–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...", font=self.font, text_color="grey")
        self.log_label.grid(row=1, column=0, sticky="ew", padx=5, pady=(0, 5))

        # --- –ü—Ä–∞–≤–∞—è —á–∞—Å—Ç—å: –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ ---
        control_panel = ctk.CTkFrame(self, width=300)
        control_panel.grid(row=0, column=1, sticky="ns", padx=(0, 10), pady=10)
        control_panel.grid_columnconfigure(0, weight=1)

        row = 0

        # 1. –ö–Ω–æ–ø–∫–∞ "–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ç–æ–≤–∞—Ä—ã" (–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 5 - —Å–º–µ—â–µ–Ω–æ –≤–≤–µ—Ä—Ö)
        ctk.CTkButton(control_panel, text="üöÄ –ó–∞–≥—Ä—É–∑–∏—Ç—å –°–±–æ—Ä–æ—á–Ω—ã–µ –ó–∞–¥–∞–Ω–∏—è", command=self.load_wb_orders, font=self.font,
                      fg_color="blue", state="normal").grid(row=row, column=0, padx=10, pady=(10, 5), sticky="ew")
        row += 1
        ctk.CTkButton(control_panel, text="–û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å—ã —Å–±–æ—Ä–∫–∏", command=self.update_orders_statuses_from_api, font=self.font,
                      fg_color="gray", state="normal").grid(row=row, column=0, padx=10, pady=(10, 5), sticky="ew")
        row += 1
        # --- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ---
        ctk.CTkFrame(control_panel, height=2, fg_color="gray").grid(row=row, column=0, padx=10, pady=10, sticky="ew")
        row += 1

        # 2. –ü–æ–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –®—Ç—Ä–∏—Ö–∫–æ–¥–∞ –¢–æ–≤–∞—Ä–∞
        ctk.CTkLabel(control_panel, text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞:", font=self.font).grid(row=row, column=0, padx=10,
                                                                                      pady=(10, 0), sticky="w")
        row += 1
        self.scan_entry = ctk.CTkEntry(control_panel, font=self.font)
        self.scan_entry.bind('<Return>', lambda event: self.handle_barcode_input(self.scan_entry.get()))
        self.scan_entry.grid(row=row, column=0, padx=10, pady=(0, 10), sticky="ew")
        row += 1

        # 3. –ü–æ–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ö–ò–ó (–ú–∞—Ä–∫–∏—Ä–æ–≤–∫–∏) (–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3)
        ctk.CTkLabel(control_panel, text="–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ö–ò–ó (–ß–ó):", font=self.font).grid(row=row, column=0, padx=10,
                                                                                        pady=(10, 0), sticky="w")
        row += 1
        self.cis_entry = ctk.CTkEntry(control_panel, font=self.font)
        self.cis_entry.bind('<Return>', lambda event: self.handle_cis_input(self.cis_entry.get()))
        self.cis_entry.grid(row=row, column=0, padx=10, pady=(0, 10), sticky="ew")
        row += 1

        # 4. –ö–Ω–æ–ø–∫–∞ "–°–æ–±—Ä–∞—Ç—å –ó–∞–∫–∞–∑" (–†—É—á–Ω–∞—è —Å–±–æ—Ä–∫–∞) (–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 1)
        self.assembly_button = ctk.CTkButton(control_panel, text="–î–æ–±–∞–≤–∏—Ç—å —Å–±–æ—Ä–æ—á–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ –∫ –ø–æ—Å—Ç–∞–≤–∫–µ",
                                             command=self.finalize_manual_assembly, font=self.font, fg_color="green",
                                             state="normal")
        self.assembly_button.grid(row=row, column=0, padx=10, pady=10, sticky="ew")
        row += 1

        # --- –†–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ---
        ctk.CTkFrame(control_panel, height=2, fg_color="gray").grid(row=row, column=0, padx=10, pady=10, sticky="ew")
        row += 1

        # 5. –ö–Ω–æ–ø–∫–∞ "–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É" (–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 4)
        ctk.CTkButton(control_panel, text="üì¶ –°–æ–∑–¥–∞—Ç—å –ü–æ—Å—Ç–∞–≤–∫—É WB", command=self.create_new_supply, font=self.font).grid(
            row=row, column=0, padx=10, pady=(0, 5), sticky="ew")
        row += 1

        # 6. –í—ã–±–æ—Ä/–ü—Ä–æ—Å–º–æ—Ç—Ä –ü–æ—Å—Ç–∞–≤–∫–∏
        ctk.CTkLabel(control_panel, text="–ê–∫—Ç–∏–≤–Ω–∞—è –ü–æ—Å—Ç–∞–≤–∫–∞:", font=self.font).grid(row=row, column=0, padx=10,
                                                                                    pady=(5, 0), sticky="w")
        row += 1
        self.supply_combobox = ctk.CTkComboBox(control_panel, variable=self.wb_supply_id_var, values=[""],
                                               font=self.font, state="readonly",
                                               command=self._update_supply_combobox_selection)
        self.supply_combobox.grid(row=row, column=0, padx=10, pady=(0, 10), sticky="ew")
        row += 1

        # 7. –ö–Ω–æ–ø–∫–∞ "–ü–µ—á–∞—Ç—å –≠—Ç–∏–∫–µ—Ç–∫–∏" (–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2)
        self.print_button = ctk.CTkButton(control_panel, text="üñ®Ô∏è –ü–µ—á–∞—Ç—å –≠—Ç–∏–∫–µ—Ç–∫–∏",
                                          command=self.print_label_from_button, font=self.font, fg_color="gray",
                                          state="disabled")
        self.print_button.grid(row=row, column=0, padx=10, pady=10, sticky="ew")
        row += 1
        # 8. –ö–Ω–æ–ø–∫–∞ "–í –¥–æ—Å—Ç–∞–≤–∫—É"
        self.transfer_button = ctk.CTkButton(control_panel, text="–ü–µ—Ä–µ–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É –≤ –¥–æ—Å—Ç–∞–≤–∫—É",
                                          command=self.transfer_supply_to_delivery_button, font=self.font, fg_color="blue",
                                          state="normal")
        self.transfer_button.grid(row=row, column=0, padx=10, pady=10, sticky="ew")
        row += 1
        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –≤—ã—Ä–æ–≤–Ω–µ–Ω—ã –ø–æ –≤–µ—Ä—Ö—É
        control_panel.grid_rowconfigure(row, weight=1)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º EditableDataTable
        self.data_table = EditableDataTable(
            self.table_frame,
            dataframe=self.fbs_df,
            columns=self.columns,
            max_rows=5000,
            header_font=("Segoe UI", 12),  # , "bold"),
            cell_font=("Segoe UI", 14),
            on_row_select=self._handle_row_selection,
            readonly=False,
            on_edit_start=self.on_edit_start,
            on_edit_end=self.on_edit_end,
            textlbl= self.marketplace +' FBS'
        )
        self.data_table.pack(fill="both", expand=True)
        # üí° –î–û–ë–ê–í–õ–ï–ù–ò–ï –ü–†–ò–í–Ø–ó–û–ö –ù–ê–í–ò–ì–ê–¶–ò–ò –°–¢–†–ï–õ–ö–ê–ú–ò
        # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ self.data_table —É–∂–µ —Å–æ–∑–¥–∞–Ω, –∏ self.data_table.tree –¥–æ—Å—Ç—É–ø–µ–Ω.
        # self.data_table.tree.bind('<<TreeviewSelect>>', self.on_row_select)

        # üí° –ù–û–í–´–ï –ü–†–ò–í–Ø–ó–ö–ò: –ò—Å–ø–æ–ª—å–∑—É–µ–º <KeyRelease> –¥–ª—è –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
        self.data_table.tree.bind('<Up>', self.on_arrow_key_release)
        self.data_table.tree.bind('<Down>', self.on_arrow_key_release)
        self.data_table.tree.bind('<Return>', self.on_arrow_key_release)
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.update_table()
        self.update_supply_combobox()
        self.start_auto_focus()

    def on_arrow_key_release(self, event):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏–µ —Å—Ç—Ä–µ–ª–æ–∫ (Up/Down) –∏ Enter.
        –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –∑–∞–¥–µ—Ä–∂–∫—É, —á—Ç–æ–±—ã Treeview —É—Å–ø–µ–ª –æ–±–Ω–æ–≤–∏—Ç—å –≤—ã–¥–µ–ª–µ–Ω–∏–µ,
        –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–∑—ã–≤–∞—Ç—å on_row_select.
        """
        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –≤ 5 –º—Å, —á—Ç–æ–±—ã Treeview –æ–±–Ω–æ–≤–∏–ª –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        self.after(5, lambda: self._handle_row_selection(None))


    def apply_row_coloring(self):
        """
        –ü—Ä–æ—Ö–æ–¥–∏—Ç –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º –≤ Treeview –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—ã–µ —Ç–µ–≥–∏
        ('completed', 'found') –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ self.fbs_df.
        """
        if self.fbs_df.empty or not hasattr(self, 'data_table'):
            return

        # 1. –°–±—Ä–æ—Å —Å—Ç–∞—Ä—ã—Ö —Ç–µ–≥–æ–≤ —Å–æ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è)
        for item in self.data_table.tree.get_children():
            self.data_table.tree.item(item, tags=())

            # 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö —Ç–µ–≥–æ–≤
        for index, row in self.fbs_df.iterrows():
            row_id = str(index)  # iid –≤ Treeview –≤—Å–µ–≥–¥–∞ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å–æ —Å—Ç—Ä–æ–∫–æ–≤—ã–º –∏–Ω–¥–µ–∫—Å–æ–º DF
            status_tag = self.get_row_status(row)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —Å—Ç—Ä–æ–∫–∞ –≤ Treeview
            if status_tag and self.data_table.tree.exists(row_id):
                # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω—É–∂–Ω—ã–π —Ç–µ–≥
                self.data_table.tree.item(row_id, tags=(status_tag,))

        self.data_table.tree.tag_configure("found", background="#FFFACD")  # –ñ–µ–ª—Ç—ã–π - –Ω–∞–π–¥–µ–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏–ª–∏ —Ç–æ–≤–∞—Ä –≤ –ë–î
        self.data_table.tree.tag_configure("missing", background="#FFB6C1")  # –ö—Ä–∞—Å–Ω—ã–π - —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
        self.data_table.tree.tag_configure("completed", background="#90EE90")  # –ó–µ–ª–µ–Ω—ã–π - –µ—Å—Ç—å –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥, –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞
        self.data_table.tree.tag_configure("confirm", background="#CCFFCC")  # –û—á–µ–Ω—å –±–ª–µ–¥–Ω—ã–π, –ø–æ—á—Ç–∏ –±–µ–ª—ã–π —Å –ª–µ–≥–∫–∏–º –∑–µ–ª–µ–Ω—ã–º –æ—Ç—Ç–µ–Ω–∫–æ–º.

    # --- –ú–ï–¢–û–î–´ –û–ë–†–ê–ë–û–¢–ö–ò –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø ---
    def handle_barcode_input(self, input_value: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞.
        """
        self.editing = True
        self.current_barcode = input_value.strip()
        self.scan_entry.delete(0, 'end')  # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ —Å—Ä–∞–∑—É

        if not self.current_barcode:
            self.show_log("‚ùå –û—à–∏–±–∫–∞: –í–≤–µ–¥–∏—Ç–µ —à—Ç—Ä–∏—Ö–∫–æ–¥.", is_error=True)
            self.editing = False
            self.start_auto_focus()
            return

        self.show_log(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {self.current_barcode}")
        # print(str(self.current_barcode))
        # print(self.fbs_df['–®—Ç—Ä–∏—Ö–∫–æ–¥'].astype(str))
        # 1. –ü–æ–∏—Å–∫: –∏—â–µ–º  –®—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –≤ —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–∞—Ö
        matches = self.fbs_df[self.fbs_df['–®—Ç—Ä–∏—Ö–∫–æ–¥'].astype(str) == str(self.current_barcode)].copy()
        row_index = 0

        if not matches.empty:
            # --- –õ–æ–≥–∏–∫–∞ –°–±–æ—Ä–∫–∏ –ø–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é (–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è) ---
            row_index = matches.index[0]
            print('row_index',row_index)
            row = self.fbs_df.loc[row_index]
            self.selected_row_index = row_index
           # --- –î–û–ë–ê–í–õ–ï–ù–ò–ï –õ–û–ì–ò–ö–ò –í–´–î–ï–õ–ï–ù–ò–Ø –ò –§–û–ö–£–°–ê - --

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –∫ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–µ
            # self.data_table.scroll_to_row(row_index)

            # –í—ã–¥–µ–ª—è–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É (–¥–µ–ª–∞–µ–º –µ–µ –∞–∫—Ç–∏–≤–Ω–æ–π/—Ç–µ–∫—É—â–µ–π) self.on_row_select(selected_index)
            # self.data_table.on_row_select(row_index)

            # ---------------------------------------------

            self.data_table.select_row(row_index)
            play_success_scan_sound()

        # 2. –ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–æ–≤—ã–π –®–ö –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
        else:
            # self.handle_unmatched_barcode(self.current_barcode) –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø–æ–∑–∂–µ
            self.show_log(f"–ù–µ—Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ: –≤–æ–∑–º–æ–∂–Ω–æ, —ç—Ç–æ –Ω–æ–≤—ã–π {self.current_barcode} –®–ö –∏–ª–∏ –∞—Ä—Ç–∏–∫—É–ª ")

        print('row_index', row_index)
        # self._select_row_by_index(row_index)
        # self.editing = True
        # self.start_auto_focus()


    def handle_cis_input(self, input_value: str):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –ö–ò–ó (–ß–µ—Å—Ç–Ω—ã–π –∑–Ω–∞–∫). (–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 3)"""
        cis_code = input_value.strip()
        self.cis_entry.delete(0, 'end')

        if not cis_code:
            self.show_log("‚ùå –í–≤–µ–¥–∏—Ç–µ –ö–ò–ó.", is_error=True)
            self.start_auto_focus()
            return

        if self.selected_row_index is None:
            self.show_log("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ –æ—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —Ç–æ–≤–∞—Ä.", is_error=True)
            play_unsuccess_scan_sound()
            self.start_auto_focus()
            return

        # –í–†–ï–ú–ï–ù–ù–ê–Ø –õ–û–ì–ò–ö–ê: –ü—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ö–ò–ó –≤ —Å—Ç—Ä–æ–∫–µ

        row = self.fbs_df.loc[self.selected_row_index]
        self.fbs_df.loc[self.selected_row_index, '–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏'] = cis_code
        self.show_log(f"‚úÖ –ö–ò–ó ({cis_code[:10]}...) –∑–∞–ø–∏—Å–∞–Ω –¥–ª—è –∑–∞–∫–∞–∑–∞ {row['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']}.", is_error=False)
        self.update_table()
        self.start_auto_focus()

    def handle_unmatched_barcode(self, barcode: str):
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∏ –æ–¥–Ω–æ–º—É —Ç–µ–∫—É—â–µ–º—É –∑–∞–∫–∞–∑—É.
        –ü—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –µ–≥–æ –∫–∞–∫ –Ω–æ–≤—ã–π –®–ö/–ê—Ä—Ç–∏–∫—É–ª. –≠–¢–û –ù–ê–î–û –î–û–†–ê–ë–û–¢–ê–¢–¨ !!!
        """
        # –ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ –≤ –±–∞–∑–µ –Ω–æ–≤—ã—Ö –®–ö (wb_marking_db)
        match = self.wb_marking_db[self.wb_marking_db['–®—Ç—Ä–∏—Ö–∫–æ–¥'] == barcode]

        if not match.empty:
            self.show_log(f"‚ö†Ô∏è –®–ö {barcode} –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ, –Ω–æ –Ω–µ –≤ —Ç–µ–∫—É—â–∏—Ö –∑–∞–∫–∞–∑–∞—Ö. –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω.", is_error=True)
            play_unsuccess_scan_sound()
            return

        self.show_log(f"‚ùå –®–ö/–ê—Ä—Ç–∏–∫—É–ª {barcode} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∏ –≤ –∑–∞–∫–∞–∑–∞—Ö, –Ω–∏ –≤ –±–∞–∑–µ.", is_error=True)

        # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –¥–æ–±–∞–≤–∏—Ç—å –®–ö –≤ –±–∞–∑—É (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 6)
        if messagebox.askyesno("–ù–æ–≤—ã–π –®—Ç—Ä–∏—Ö–∫–æ–¥/–ê—Ä—Ç–∏–∫—É–ª",
                               f"–®–ö/–ê—Ä—Ç–∏–∫—É–ª {barcode} –Ω–µ –Ω–∞–π–¥–µ–Ω.\n–•–æ—Ç–∏—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –±–∞–∑—É?"):

            # --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –®–ö/–ê—Ä—Ç–∏–∫—É–ª–∞ ---
            article = eg.enterbox("–í–≤–µ–¥–∏—Ç–µ –ê—Ä—Ç–∏–∫—É–ª –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è –¥–ª—è —ç—Ç–æ–≥–æ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞:", "–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –®–ö")
            if not article:
                self.show_log("–û—Ç–º–µ–Ω–µ–Ω–æ. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –®–ö/–ê—Ä—Ç–∏–∫—É–ª–∞ –ø—Ä–æ–ø—É—â–µ–Ω–æ.", is_error=True)
                return

            new_row = pd.DataFrame([{
                '–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è': article,
                '–®—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è': barcode,
                '–ë–∞—Ä–∫–æ–¥ Wildberries': '',
            }])

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –±–∞–∑—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º
            self.wb_marking_db = pd.concat([self.wb_marking_db, new_row], ignore_index=True)
            self._save_new_barcodes()
            self.show_log(f"‚úÖ –ù–æ–≤—ã–π –®–ö/–ê—Ä—Ç–∏–∫—É–ª {article} ({barcode}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É.", is_error=False)

        play_unsuccess_scan_sound()

    # --- –ú–ï–¢–û–î–´ –£–ü–†–ê–í–õ–ï–ù–ò–Ø UI –ò –î–ê–ù–ù–´–ú–ò ---

    def load_wb_orders(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–æ–≤—ã–µ —Å–±–æ—Ä–æ—á–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è WB —á–µ—Ä–µ–∑ API."""
        debug_info = False
        try:
            self.show_log("WB API: –ó–∞–ø—Ä–æ—Å –Ω–æ–≤—ã—Ö —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...")
            orders_data = self.api.get_orders(params={'flag': 0})
            orders = orders_data.get('orders', [])

            if not orders:
                self.show_log("‚úÖ –ù–æ–≤—ã—Ö —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", is_error=False)
                return

            new_orders_df = pd.DataFrame(orders)
            if debug_info:
                self.debug_print_first_row(new_orders_df, 2)
                self.debug_print_first_row(new_orders_df, 3)
            else:
                # –°–æ–∑–¥–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ –∫–æ–ª–æ–Ω–∫–∏ –∏ —Å—Ç–∞—Ç—É—Å—ã (—Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–æ–ª–±—Ü—ã, –∫–∞–∫ –≤ self.fbs_df) –í–†–ï–ú–ï–ù–ù–û –ó–ê–ö–û–ú–ú–ï–ù–¢–ò–†–û–í–ê –Ω–∏–∂–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
                new_orders_df['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'] = new_orders_df['id']
                new_orders_df['–°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏'] = self.marketplace
                new_orders_df['–¶–µ–Ω–∞'] = new_orders_df['finalPrice']
                new_orders_df['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞'] = new_orders_df['article']
                new_orders_df['–†–∞–∑–º–µ—Ä'] = new_orders_df['chrtId']
                new_orders_df['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'] = 'new'

                def extract_first_sku(sku_list):
                    """
                    –ò–∑–≤–ª–µ–∫–∞–µ—Ç –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ skus.
                    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç NaN, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç, None, –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º.
                    """
                    if isinstance(sku_list, list) and sku_list:
                        return sku_list[0]
                    return ''

                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Å—Ç–æ–ª–±–µ—Ü '–®—Ç—Ä–∏—Ö–∫–æ–¥', –ø—Ä–∏–º–µ–Ω—è—è —Ñ—É–Ω–∫—Ü–∏—é –∫ –∫–æ–ª–æ–Ω–∫–µ 'skus'
                new_orders_df['–®—Ç—Ä–∏—Ö–∫–æ–¥'] = new_orders_df['skus'].apply(extract_first_sku)

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –∏–∑ self.fbs_df, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ –ø—Ä–∏ concat
                for col in self.fbs_df.columns:
                    if col not in new_orders_df.columns:
                        new_orders_df[col] = ''

                # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–µ–π —Ç–∞–±–ª–∏—Ü–µ–π (—É–¥–∞–ª—è—è –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞')
                self.fbs_df = pd.concat([self.fbs_df, new_orders_df], ignore_index=True)
                self.fbs_df = self.fbs_df.drop_duplicates(subset=['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'], keep='last')

                # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –æ—Ç —Å—Ç—Ä–æ–∫, –≥–¥–µ –Ω–µ—Ç –Ω–æ–º–µ—Ä–∞ –∑–∞–∫–∞–∑–∞ (–º–æ–≥—É—Ç –ø–æ—è–≤–∏—Ç—å—Å—è –ø—Ä–∏ –æ—à–∏–±–∫–µ API)
                self.fbs_df = self.fbs_df[self.fbs_df['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'] != ''].copy()

                self.update_table()
                self.show_log(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(orders)} –Ω–æ–≤—ã—Ö —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π WB.")

        except Exception as e:
            self.show_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ WB: {e}", is_error=True)
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–∫–∞–∑–æ–≤ WB: {e}")
            # play_unsuccess_scan_sound()

    def create_new_supply(self):
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É WB (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 4)."""
        supply_name = eg.enterbox("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏:", "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏",
                                  f"–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç {datetime.now().strftime('%Y-%m-%d')}")

        if not supply_name:
            self.show_log("–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.", is_error=True)
            return

        try:
            self.show_log(f"WB API: –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤–∫–∏ '{supply_name}'...")
            result = self.api.create_supply(supply_name)
            new_supply_id = result.get('id')

            if new_supply_id:
                self.wb_supply_id_var.set(new_supply_id)
                self.update_supply_combobox()  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å
                self.show_log(f"‚úÖ –ù–æ–≤–∞—è –ø–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {new_supply_id}", is_error=False)
            else:
                self.show_log(f"‚ùå WB API –Ω–µ –≤–µ—Ä–Ω—É–ª ID –ø–æ—Å—Ç–∞–≤–∫–∏.", is_error=True)

        except Exception as e:
            self.show_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏: {e}", is_error=True)
            play_unsuccess_scan_sound()

    def update_supply_combobox(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫ –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç ComboBox."""
        try:
            supplies_data = self.api.get_supplies(params={'status': 'active'})
            supplies = supplies_data.get('supplies', [])

            supply_ids = [s['id'] for s in supplies if s['status'] in ('new', 'active')]

            if not supply_ids:
                self.supply_combobox.configure(values=["<–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫>"])
                # –ï—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ - —Ä–µ–∞–ª—å–Ω—ã–π ID, –Ω–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –µ–≥–æ
                if self.wb_supply_id_var.get() not in supply_ids:
                    self.wb_supply_id_var.set("<–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ—Å—Ç–∞–≤–æ–∫>")
            else:
                current_id = self.wb_supply_id_var.get()
                if current_id and current_id not in supply_ids:
                    supply_ids.insert(0, current_id)

                self.supply_combobox.configure(values=supply_ids)

                if not current_id or current_id not in supply_ids:
                    self.wb_supply_id_var.set(supply_ids[0])

        except Exception as e:
            self.show_log(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤–æ–∫: {e}", is_error=True)
            self.supply_combobox.configure(values=["<–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏>"])

    def _update_supply_combobox_selection(self, selected_id):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ ComboBox."""
        self.wb_supply_id_var.set(selected_id)
        self.show_log(f"–í—ã–±—Ä–∞–Ω–∞ –ø–æ—Å—Ç–∞–≤–∫–∞: {selected_id}")

    # --- –ú–ï–¢–û–î–´ –°–ë–û–†–ö–ò –ò –ü–ï–ß–ê–¢–ò (–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è 1, 2, 3) ---

    def _handle_row_selection(self, row_index=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ."""


        if row_index is None:
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –æ–±–µ –∫–Ω–æ–ø–∫–∏, –µ—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞
            # self.assembly_button.configure(state="disabled")
            # self.print_button.configure(state="disabled")
            return
        # print(f"DEBUG:FBSModeWB _handle_row_select received index: {row_index}")
        self.selected_row_index = row_index
        try:
            row = self.fbs_df.loc[row_index]
        except KeyError:
            # –ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –∏–Ω–¥–µ–∫—Å
            self.assembly_button.configure(state="disabled")
            self.print_button.configure(state="disabled")
            return

        is_processed = row["–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] == 'complete'
        has_barcode = row["–®—Ç—Ä–∏—Ö–∫–æ–¥"] != ""
        has_marking = row["–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"] != ""
        has_articul = row["–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"] != ""
        has_size = row["–†–∞–∑–º–µ—Ä"] != ""

        # self.show_log(f"–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏: {is_processed} –®—Ç—Ä–∏—Ö–∫–æ–¥: {has_barcode} –ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏: {has_marking}", is_error=True)
        # –£—Å–ª–æ–≤–∏—è –¥–ª—è "–°–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑" (finalize_manual_assembly):
        # 1. –ó–∞–∫–∞–∑ –ù–ï –æ–±—Ä–∞–±–æ—Ç–∞–Ω.
        # 2. –®—Ç—Ä–∏—Ö–∫–æ–¥ –∏ –ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω, —Ö–æ—Ç—è —Ç—É—Ç –º—ã –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ) –∑–∞–ø–æ–ª–Ω–µ–Ω—ã.
        can_finalize = (not is_processed and has_articul and has_size) # and has_marking)

        # –£—Å–ª–æ–≤–∏—è –¥–ª—è "–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏":
        # 1. –ó–∞–∫–∞–∑ —É–∂–µ –û–±—Ä–∞–±–æ—Ç–∞–Ω.
        can_print = is_processed

        # üí° –£–ü–†–ê–í–õ–ï–ù–ò–ï –ö–ù–û–ü–ö–ê–ú–ò
        self.assembly_button.configure(state="normal" if can_finalize else "disabled")
        self.print_button.configure(state="normal" if can_print else "disabled")

    def _update_assembly_button_state(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–∫–∏ '–°–æ–±—Ä–∞—Ç—å –ó–∞–∫–∞–∑' (–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 1)."""
        if self.selected_row_index is not None:
            row = self.fbs_df.loc[self.selected_row_index]
            if row['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'] != 'new':
                self.assembly_button.configure(state="normal", fg_color="green")
                return

        self.assembly_button.configure(state="disabled", fg_color="gray")

    def _update_print_button_state(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –∏ —Ü–≤–µ—Ç –∫–Ω–æ–ø–∫–∏ '–ü–µ—á–∞—Ç—å –≠—Ç–∏–∫–µ—Ç–∫–∏' (–¢—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2)."""
        is_printable = False

        if self.selected_row_index is not None:
            row = self.fbs_df.loc[self.selected_row_index]
            # –ê–∫—Ç–∏–≤–Ω–∞, –µ—Å–ª–∏ —Å–æ–±—Ä–∞–Ω–æ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ø–æ—Å—Ç–∞–≤–∫—É
            if (row['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'] == 'confirm') and bool(re.match(self.pattern, row['–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏'])):
                is_printable = True

        if is_printable:
            self.print_button.configure(state="normal", fg_color="blue")
        else:
            self.print_button.configure(state="disabled", fg_color="gray")


    def finalize_manual_assembly(self):
        """
        –ó–∞–≤–µ—Ä—à–∞–µ—Ç —Ä—É—á–Ω—É—é —Å–±–æ—Ä–∫—É –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞:
        1. –î–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ —Ç–µ–∫—É—â—É—é –ø–æ—Å—Ç–∞–≤–∫—É WB.
        2. –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –≤ —Ç–∞–±–ª–∏—Ü–µ.
        3. –ê–∫—Ç–∏–≤–∏—Ä—É–µ—Ç –∫–Ω–æ–ø–∫—É –ø–µ—á–∞—Ç–∏.
        """
        debug_info = False
        selected_supply_id = self.wb_supply_id_var.get().strip()
        if self.selected_row_index is None:
            self.show_log("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –∑–∞–∫–∞–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏.", is_error=True)
            return

        if selected_supply_id  is None:
            self.show_log("‚ùå –°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ–∫—É—â—É—é –ø–æ—Å—Ç–∞–≤–∫—É WB.", is_error=True)
            return

        row_index = self.selected_row_index
        order_id = self.fbs_df.loc[row_index, "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"]
        # printer_target = self.app_context.printer_name

        self.show_log(
            f"üîó –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É –∑–∞–∫–∞–∑–∞ {order_id} –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø–æ—Å—Ç–∞–≤–∫—É {selected_supply_id}...")
        if debug_info: print(f"üîó –ü–æ–ø—ã—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–±–æ—Ä–∫—É –∑–∞–∫–∞–∑–∞ {order_id} –∏ –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –ø–æ—Å—Ç–∞–≤–∫—É {selected_supply_id}...")
        # 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –≤ –ø–æ—Å—Ç–∞–≤–∫—É WB (–®–∞–≥ 5 - —á–∞—Å—Ç—å 1)
        try:
            self.show_log(f"WB API: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} –≤ –ø–æ—Å—Ç–∞–≤–∫—É {selected_supply_id}...")
            if debug_info: print(f"WB API: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} –≤ –ø–æ—Å—Ç–∞–≤–∫—É {selected_supply_id}...")
            else: self.api.add_order_to_supply(selected_supply_id, order_id)
            self.update_status(status = 2, supply = selected_supply_id)

            self.show_log(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Å—Ç–∞–≤–∫—É {selected_supply_id} (WB API).")
            if debug_info: print(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Å—Ç–∞–≤–∫—É {selected_supply_id} (WB API).")
        except Exception as e:
            self.show_log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id} –≤ –ø–æ—Å—Ç–∞–≤–∫—É: {e}", is_error=True)
            if debug_info: print(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id} –≤ –ø–æ—Å—Ç–∞–≤–∫—É: {e}")
            return

        # 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ DataFrame (–®–∞–≥ 6)
        try:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏ –Ω–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏
            self.fbs_df.loc[row_index, "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] = 'confirm'
            self.fbs_df.loc[row_index, "–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏"] = selected_supply_id

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã –∏ —Ä–∞—Å–∫—Ä–∞—Å–∫–∏
            self.update_table(self.fbs_df)

            # 3. –ê–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–∫–∏ –ø–µ—á–∞—Ç–∏ (–®–∞–≥ 6 - —á–∞—Å—Ç—å 2 & –®–∞–≥ 7)
            # –ü–æ—Å–∫–æ–ª—å–∫—É –º—ã –≤—ã–∑–≤–∞–ª–∏ update_table, row_select –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤—ã–∑–≤–∞–Ω
            # (–µ—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–∏–≤—è–∑–∫–∞ –∏–ª–∏ –º—ã –¥–µ–ª–∞–µ–º —ç—Ç–æ —è–≤–Ω–æ)
            # self._handle_row_selection()
            self.print_button.configure(state="normal")  # –Ø–≤–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π —Å–±–æ—Ä–∫–∏

            play_success_scan_sound()
            self.show_log(f"üéâ –ó–∞–∫–∞–∑ {order_id} —Å–æ–±—Ä–∞–Ω –∏ –≥–æ—Ç–æ–≤ –∫ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏!", is_error=False)

        except Exception as e:
            self.show_log(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ {order_id}: {e}", is_error=True)

    def _add_order_to_supply_and_print(self, row, supply_id):
        """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥: –¥–æ–±–∞–≤–ª—è–µ—Ç –∑–∞–∫–∞–∑ –≤ –ø–æ—Å—Ç–∞–≤–∫—É –∏ –ø–µ—á–∞—Ç–∞–µ—Ç —ç—Ç–∏–∫–µ—Ç–∫—É."""
        order_id = row['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']
        printer_target = self.app_context.printer_name

        # 1. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ø–æ—Å—Ç–∞–≤–∫—É
        try:
            self.show_log(f"WB API: –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ {order_id} –≤ –ø–æ—Å—Ç–∞–≤–∫—É {supply_id}...")
            self.api.add_order_to_supply(supply_id, order_id)

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –≤ DataFrame
            self.fbs_df.loc[row.name, '–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏'] = supply_id
            self.show_log(f"‚úÖ –ó–∞–∫–∞–∑ {order_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Å—Ç–∞–≤–∫—É {supply_id}.", is_error=False)

            # 2. –ü–µ—á–∞—Ç—å (–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è)
            self._fetch_and_print_wb_label(order_id, printer_target)

        except Exception as e:
            self.fbs_df.loc[row.name, '–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏'] = '–û—à–∏–±–∫–∞'
            self.show_log(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ {order_id} –≤ –ø–æ—Å—Ç–∞–≤–∫—É: {e}", is_error=True)
            play_unsuccess_scan_sound()

    def print_label_from_button(self):
        """–ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ –ø–æ –∫–Ω–æ–ø–∫–µ (—Ç—Ä–µ–±–æ–≤–∞–Ω–∏–µ 2)."""
        if self.selected_row_index is None:
            self.show_log("‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—Ç—Ä–æ–∫—É –¥–ª—è –ø–µ—á–∞—Ç–∏.", is_error=True)
            return

        row = self.fbs_df.loc[self.selected_row_index]
        # print('–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞:', row["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"], '–ò–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏:', self.selected_row_index)
        # print('–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏:',row['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'],'–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏:',row['–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏'])
        # print('–ü—Ä–æ–≤–µ—Ä–∫–∞ —à–∞–±–ª–æ–Ω–∞ ID –ø–æ—Å—Ç–∞–≤–∫–∏:', bool(re.match(self.pattern,row['–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏'])))

        if (row['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'] == 'confirm') and bool(re.match(self.pattern,row['–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏'])):
            self._fetch_and_print_wb_label(int(row['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']), self.app_context.printer_name)
        else:
            self.show_log("‚ùå –ó–∞–∫–∞–∑ –Ω–µ —Å–æ–±—Ä–∞–Ω –∏–ª–∏ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –ø–æ—Å—Ç–∞–≤–∫—É. –ü–µ—á–∞—Ç—å –Ω–µ–≤–æ–∑–º–æ–∂–Ω–∞.", is_error=True)

    def _fetch_and_print_wb_label(self, order_id, printer_target):
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç ZPL —ç—Ç–∏–∫–µ—Ç–∫—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞ –ø–µ—á–∞—Ç—å."""
        debug_info = False
        try:
            self.show_log("WB API: –ó–∞–ø—Ä–æ—Å ZPL —ç—Ç–∏–∫–µ—Ç–∫–∏...")
            if debug_info: print("WB API: –ó–∞–ø—Ä–æ—Å ZPL —ç—Ç–∏–∫–µ—Ç–∫–∏...")
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Å—Ç–∏–∫–µ—Ä –≤ —Ñ–æ—Ä–º–∞—Ç–µ ZPL
            stickers_response = self.api.get_stickers([order_id], type="png", width=58, height=40)
            stickers = stickers_response.get('stickers')

            if stickers and isinstance(stickers, list) and 'file' in stickers[0]:
                label_base64_data = stickers[0]['file']
                if debug_info: print(f"‚úÖ –≠—Ç–∏–∫–µ—Ç–∫–∞ WB –ø–æ–ª—É—á–µ–Ω–∞, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–ø–µ—á–∞—Ç–∞—Ç—å")
                # print_wb_ozon_label —Å–∞–º –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —á—Ç–æ —ç—Ç–æ ZPL, –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç –µ–≥–æ –Ω–∞ –ø–µ—á–∞—Ç—å.
                # if self.label_printer.print_wb_ozon_label(label_base64_data, printer_target):
                if self.label_printer.print_on_windows(image = label_base64_data):
                    self.show_log(f"‚úÖ –≠—Ç–∏–∫–µ—Ç–∫–∞ WB –¥–ª—è {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–µ—á–∞—Ç—å.", is_error=False)
                    if debug_info: print(f"‚úÖ –≠—Ç–∏–∫–µ—Ç–∫–∞ WB –¥–ª—è {order_id} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –ø–µ—á–∞—Ç—å.")
                else:
                    self.show_log("‚ùå –ü—Ä—è–º–∞—è ZPL-–ø–µ—á–∞—Ç—å –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä .", is_error=True)
                    if debug_info: print("‚ùå –ü—Ä—è–º–∞—è ZPL-–ø–µ—á–∞—Ç—å –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–Ω—Ç–µ—Ä .")
            else:
                self.show_log("‚ùå WB API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏.", is_error=True)
                if debug_info: print("‚ùå WB API –Ω–µ –≤–µ—Ä–Ω—É–ª –¥–∞–Ω–Ω—ã–µ —ç—Ç–∏–∫–µ—Ç–∫–∏.")

        except Exception as e:
            self.show_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ WB: {e}", is_error=True)
            if debug_info: print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ WB: {e}")
            play_unsuccess_scan_sound()

    def transfer_supply_to_delivery_button(self):
        debug_info = False
        selected_supply_id = self.wb_supply_id_var.get().strip()
        try:
            self.show_log(f"WB API: –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É {selected_supply_id} –≤ –¥–æ—Å—Ç–∞–≤–∫—É", is_error=True)
            if debug_info: print(f"WB API: –ü–µ—Ä–µ–¥–∞–µ–º –ø–æ—Å—Ç–∞–≤–∫—É {selected_supply_id} –≤ –¥–æ—Å—Ç–∞–≤–∫—É")
            else:
                self.api.close_supply_complete(supplyId = selected_supply_id)
            self.update_status(status=3, supply=selected_supply_id)
            self.show_log(f"–°–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—É—é –ø–æ—Å—Ç–∞–≤–∫—É", is_error=True)

            self.remove_supply_from_combobox(selected_supply_id)
            # setattr(self.app_context, "wb_fbs_supply_id", None)

        except Exception as e:
            self.show_log(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ WB: {e}", is_error=True)
            if debug_info: print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–ª–∏ –ø–µ—á–∞—Ç–∏ —ç—Ç–∏–∫–µ—Ç–∫–∏ WB: {e}")

    # –§—Ä–∞–≥–º–µ–Ω—Ç –∫–æ–¥–∞ –≤ –∫–ª–∞—Å—Å–µ FBSModeWB (–∏–ª–∏ —Ç–∞–º, –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∫–æ–º–±–æ–±–æ–∫—Å)

    def remove_supply_from_combobox(self, supply_to_remove: str):
        """
        –£–¥–∞–ª—è–µ—Ç —É–∫–∞–∑–∞–Ω–Ω—ã–π ID –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π –∫–æ–º–±–æ–±–æ–∫—Å–∞.
        """

        # 1. –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∑–Ω–∞—á–µ–Ω–∏–π –∏–∑ –∫–æ–º–±–æ–±–æ–∫—Å–∞
        current_values = self.supply_combobox.cget("values")

        # cget("values") –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ—Ä—Ç–µ–∂, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if isinstance(current_values, tuple):
            values_list = list(current_values)
        else:
            # –ï—Å–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–π –Ω–µ—Ç –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π, –Ω–∞—á–∏–Ω–∞–µ–º —Å –ø—É—Å—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞
            values_list = []

            # 2. –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –∏—Å–∫–ª—é—á–∞—è –Ω–µ–Ω—É–∂–Ω—ã–π ID
        if supply_to_remove in values_list:
            values_list.remove(supply_to_remove)

        # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–±–æ–±–æ–∫—Å –Ω–æ–≤—ã–º —Å–ø–∏—Å–∫–æ–º –∑–Ω–∞—á–µ–Ω–∏–π
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ configure –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–æ–≤–æ–≥–æ —Å–ø–∏—Å–∫–∞ –∑–Ω–∞—á–µ–Ω–∏–π
        self.supply_combobox.configure(values=values_list)

        # 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–æ –ª–∏ —É–¥–∞–ª–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–º
        current_selected = self.wb_supply_id_var.get()

        if current_selected == supply_to_remove:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–µ—Ä–≤–æ–µ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É)
            if values_list:
                self.supply_combobox.set(values_list[0])
                self.wb_supply_id_var.set(values_list[0])
            else:
                self.supply_combobox.set("")
                self.wb_supply_id_var.set("")


    # --- –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –ú–ï–¢–û–î–´ ---
    def on_edit_start(self):
        self.editing = True
        if self.focus_timer_id:
            self.after_cancel(self.focus_timer_id)

    def on_edit_end(self):
        self.editing = False
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ self.fbs_df –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.fbs_df = self.data_table.displayed_df.copy()
        self.save_data_to_context()
        self.start_auto_focus()

    def save_data_to_context(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.app_context.fbs_table = self.fbs_df.copy()
            wb_supply_id = self.wb_supply_id_var.get().strip()
            print(f"[DEBUG] save_data_to_context: —Å–æ—Ö—Ä–∞–Ω—è—é wb_fbs_supply_id = '{wb_supply_id}'")
            self.show_log(f"–°–æ—Ö—Ä–∞–Ω—è—é id –ø–æ—Å—Ç–∞–≤–∫–∏ WB: {wb_supply_id}")
            self.app_context.wb_fbs_supply_id = wb_supply_id
        except Exception as e:
            self.show_log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", is_error=True)

    def on_wb_supply_entry_focus_in(self, event=None):
        self.editing = True

    def on_wb_supply_entry_focus_out(self, event=None):
        self.editing = False
        self.start_auto_focus()

    def _select_row_by_index(self, index):
        """–í—ã–¥–µ–ª—è–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ç–∞–±–ª–∏—Ü–µ –ø–æ –∏–Ω–¥–µ–∫—Å—É DataFrame."""
        try:
            order_id = self.fbs_df.loc[index, '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']
            for item in self.data_table.table.get_children():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–æ—Ä—Ç–µ–∂–µ –∑–Ω–∞—á–µ–Ω–∏–π (–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞)
                if str(self.data_table.table.item(item, 'values')[0]) == str(order_id):
                    self.data_table.table.selection_set(item)
                    self.data_table.table.focus(item)
                    # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –≤—ã–¥–µ–ª–µ–Ω–Ω–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É
                    self.data_table.table.see(item)
                    return
        except Exception:
            pass

    def update_status(self,status:int=0,supply:str=None):
        if supply:
            mask = self.fbs_df['–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏'] == supply
            self.fbs_df.loc[mask, '–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'] = self.define_status[status]
        else:
            # --- 1. –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—É—Å—Ç—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π (–ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–Ω—ã–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º) ---
            # –°–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω—è–µ–º NaN (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ Pandas)
            self.fbs_df['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'] = self.fbs_df['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'].fillna(self.define_status[status])

            # –ó–∞—Ç–µ–º –Ω–∞—Ö–æ–¥–∏–º –∏ –∑–∞–º–µ–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ —Å—Ç—Ä–æ–∫–∏, —Å–æ—Å—Ç–æ—è—â–∏–µ –∏–∑ –ø—Ä–æ–±–µ–ª–æ–≤
            empty_string_mask = (self.fbs_df['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'].astype(str).str.strip() == '')
            self.fbs_df.loc[empty_string_mask, '–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'] = self.define_status[status]
        self.update_table()

        # /home/markv7/PycharmProjects/Barcode_print/gui/fbs_wb_gui.py (–≤–Ω—É—Ç—Ä–∏ –∫–ª–∞—Å—Å–∞ FBSModeWB)

    def update_orders_statuses_from_api(self):
        """
        –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å—ã –≤—Å–µ—Ö –∑–∞–∫–∞–∑–æ–≤ –∏–∑ self.fbs_df –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç DataFrame.
        """
        debug_info = False
        if self.fbs_df.empty:
            self.show_log("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–æ–≤.", is_error=False)
            return

        # 1. –ò–∑–≤–ª–µ–∫–∞–µ–º —Å–ø–∏—Å–æ–∫ ID —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        # üí° –ó–∞–º–µ–Ω–∏—Ç–µ 'ID —Å–±–æ—Ä–æ—á–Ω–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è' –Ω–∞ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–æ–µ –∏–º—è –∫–æ–ª–æ–Ω–∫–∏ —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–º ID –∑–∞–∫–∞–∑–∞ WB
        try:
            raw_ids = self.fbs_df['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞'].dropna().tolist()
            order_ids = list(map(int, raw_ids))
        except KeyError:
            self.show_log("‚ùå –û—à–∏–±–∫–∞: –ö–æ–ª–æ–Ω–∫–∞ '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", is_error=True)
            if debug_info: print("‚ùå –û—à–∏–±–∫–∞: –ö–æ–ª–æ–Ω–∫–∞ '–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        if not order_ids:
            self.show_log("–ù–µ—Ç ID —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.", is_error=False)
            if debug_info: print("–ù–µ—Ç ID —Å–±–æ—Ä–æ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
            return

        try:
            self.show_log(f"WB API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è {len(order_ids)} –∑–∞–∫–∞–∑–æ–≤...")
            if debug_info: print(f"WB API: –ó–∞–ø—Ä–æ—Å —Å—Ç–∞—Ç—É—Å–æ–≤ –¥–ª—è {len(order_ids)} –∑–∞–∫–∞–∑–æ–≤...")
            # 2. –í—ã–∑–æ–≤ –Ω–æ–≤–æ–≥–æ –º–µ—Ç–æ–¥–∞ API
            chek_orders = {"orders": order_ids }
            status_response = self.api.get_status_orders(chek_orders)
            if debug_info: print('chek_orders:', chek_orders)
            # 3. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ DataFrame
            statuses = status_response.get('orders', [])
            if debug_info: print('status_response:',status_response)
            if debug_info: print('statuses:', statuses)
            if statuses:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç–∞—Ç—É—Å–æ–≤ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞: {id: status}
                status_map = {item['id']: item['supplierStatus'] for item in statuses}

                # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –≤ DataFrame
                def map_new_status(row):
                    order_id = row['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å—Ç–∞—Ç—É—Å, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π
                    return status_map.get(order_id, row['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'])
                if debug_info:
                    print('status_map',status_map)
                    print('-----------------------------------')
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É '–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏'
                    self.fbs_df['–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏'] = self.fbs_df.apply(map_new_status, axis=1)
                    self.update_table()

                self.show_log("‚úÖ –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ WB API.", is_error=False)
                if debug_info: print("‚úÖ –°—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ WB API.")
            else:
                self.show_log("WB API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.", is_error=True)
                if debug_info: print("WB API –Ω–µ –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å—ã –∑–∞–∫–∞–∑–æ–≤ –≤ –æ–∂–∏–¥–∞–µ–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.")

        # except requests.exceptions.HTTPError as e:
        #     self.show_log(f"‚ùå –û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤: {e}", is_error=True)
        except Exception as e:
            self.show_log(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", is_error=True)
            if debug_info:
                print(f"‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")


    def update_table(self, df: pd.DataFrame=None):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–∏–º–µ–Ω—è–µ—Ç —Ü–≤–µ—Ç–æ–≤—É—é –∏–Ω–¥–∏–∫–∞—Ü–∏—é."""
        if df is None:
            df = self.fbs_df

        # 1. –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ –∫–æ–ª–æ–Ω–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –≤ —Ç–∞–±–ª–∏—Ü–µ (self.columns - 13 —à—Ç.)
        # –≠—Ç–æ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—Ö–æ–¥–Ω–æ–π DataFrame –¥–ª—è EditableDataTable.
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π self.columns, –∫–æ—Ç–æ—Ä—ã–π –≤—ã –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏ —Ä–∞–Ω–µ–µ.
        display_df = df[self.columns].copy()
        # display_df = df.copy()
        # 2. –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ EditableDataTable
        self.data_table.update_data(display_df)

        # 3. –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Ü–≤–µ—Ç–∫–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö.
        # –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–ª–∞—Å—Å FBSModeWB (—Å–º. –Ω–∏–∂–µ).
        self.apply_row_coloring()

    def show_log(self, message: str, is_error: bool = False):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –ª–æ–≥-—Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –Ω–∏–∂–Ω–µ–π —á–∞—Å—Ç–∏ UI."""
        if self.log_label:
            color = "red" if is_error else "green"
            self.log_label.configure(text=message, text_color=color)

        if hasattr(self, 'log_timer_id') and self.log_timer_id:
            self.after_cancel(self.log_timer_id)

        self.log_timer_id = self.after(5000, lambda: self.log_label.configure(text="–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è...",
                                                                              text_color="grey"))

    def start_auto_focus(self):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ñ–æ–∫—É—Å –Ω–∞ –ø–æ–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        if self.scan_entry:
            if hasattr(self, 'focus_timer_id') and self.focus_timer_id:
                self.after_cancel(self.focus_timer_id)

            self.focus_timer_id = self.after(100, self.scan_entry.focus_set)

    def get_row_status(self, row):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏"""
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –∑–µ–ª–µ–Ω—ã–π (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏)
        if row["–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] == 'complete':
            return "completed"  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        elif row["–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] == 'confirm':
            return 'confirm'  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

        # # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥, –∏ –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ - –∑–µ–ª–µ–Ω—ã–π
        # if row["–®—Ç—Ä–∏—Ö–∫–æ–¥"] != "" and row["–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"] != "":
        #     return "completed"  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤

        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —à—Ç—Ä–∏—Ö–∫–æ–¥ - –∂–µ–ª—Ç—ã–π
        if row["–®—Ç—Ä–∏—Ö–∫–æ–¥"] != "":
            return "found"  # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∏—Ö –∫–æ–¥–æ–≤

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if self.app_context.df is not None:
            matches = self.app_context.df[
                (self.app_context.df["–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"].astype(str) == str(row["–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"])) &
                (self.app_context.df["–†–∞–∑–º–µ—Ä"].astype(str) == str(row["–†–∞–∑–º–µ—Ä"]))
                ]
            if not matches.empty:
                return "found"

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        key = f"{row['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']}_{row['–†–∞–∑–º–µ—Ä']}"
        if key in self.wb_marking_db:
            return "found"

        return "missing"