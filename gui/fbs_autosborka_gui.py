import pandas as pd
import customtkinter as ctk
import os
from datetime import datetime
from tkinter import messagebox
import easygui as eg
from sound_player import play_success_scan_sound, play_unsuccess_scan_sound
from gui.gui_table import EditableDataTable
from wildberries_fbs_api import WildberriesFBSAPI
from printer_handler import LabelPrinter


class FBSMode(ctk.CTkFrame):
    def __init__(self, parent, font, app_context):
        super().__init__(parent)
        self.font = font
        self.app_context = app_context
        self.editing = False
        self.focus_timer_id = None
        self.clear_timer_id = None
        self.scan_entry = None
        self.selected_row_index = None  # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
        self.current_barcode = None     # –ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥
        self.fbs_df = pd.DataFrame()     # –¢–∞–±–ª–∏—Ü–∞ –∑–∞–∫–∞–∑–æ–≤
        self.marking_db = {}             # –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∞—Ä—Ç–∏–∫—É–ª+—Ä–∞–∑–º–µ—Ä -> —à—Ç—Ä–∏—Ö–∫–æ–¥
        self.log_timer_id = None         # –¢–∞–π–º–µ—Ä –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ª–æ–≥–∞
        self.input_mode = "barcode"      # "barcode" –∏–ª–∏ "marking" - —Ä–µ–∂–∏–º –≤–≤–æ–¥–∞
        self.pending_barcode = None      # –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –º–µ–∂–¥—É –≤–≤–æ–¥–∞–º–∏
        self.supplies = []               # –°–ø–∏—Å–æ–∫ –ø–æ—Å—Ç–∞–≤–æ–∫
        self.selected_supply_id = None   # ID –≤—ã–±—Ä–∞–Ω–Ω–æ–π –ø–æ—Å—Ç–∞–≤–∫–∏
        self.api = WildberriesFBSAPI(self.app_context.wb_api_token)
        self.label_printer = LabelPrinter()  # –≠–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –ø–µ—á–∞—Ç–∏

        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if hasattr(self.app_context, "fbs_table") and self.app_context.fbs_table is not None:
            self.fbs_df = self.app_context.fbs_table.copy()
            # –î–æ–±–∞–≤–ª—è–µ–º —Å—Ç–æ–ª–±–µ—Ü "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏" –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏" not in self.fbs_df.columns:
                self.fbs_df["–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] = "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"
        else:
            self.fbs_df = pd.DataFrame(columns=[
                "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–ú–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å", "–ü–æ–∫—É–ø–∞—Ç–µ–ª—å", "–ë—Ä–µ–Ω–¥", "–¶–µ–Ω–∞",
                "–°—Ç–∞—Ç—É—Å –¥–æ—Å—Ç–∞–≤–∫–∏", "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–†–∞–∑–º–µ—Ä",
                "–®—Ç—Ä–∏—Ö–∫–æ–¥", "–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", "–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏", "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"
            ])

        # –õ–æ–≥–∏—Ä—É–µ–º –∏ –ø–µ—á–∞—Ç–∞–µ–º id –ø–æ—Å—Ç–∞–≤–∫–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏
        saved_wb_supply_id = getattr(self.app_context, "wb_fbs_supply_id", "")
        print(f"[DEBUG] __init__: –ø–æ–¥—Å—Ç–∞–≤–ª—è—é wb_fbs_supply_id = '{saved_wb_supply_id}'")
        # self.show_log(f"–ü–æ–¥—Å—Ç–∞–≤–ª—è—é id –ø–æ—Å—Ç–∞–≤–∫–∏: {saved_supply_id}")  # –ú–æ–∂–Ω–æ —Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞

        self.setup_ui()
        # self.load_supplies()  # –£–¥–∞–ª–µ–Ω–æ, –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ

    def setup_ui(self):
        """–°–æ–∑–¥–∞—ë—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        self.title_label = ctk.CTkLabel(
            self,
            text="–§–ë–° –ê–≤—Ç–æ—Å–±–æ—Ä–∫–∞",
            font=ctk.CTkFont(size=20, weight="bold"),
            anchor="w"
        )
        self.title_label.pack(anchor="nw", padx=20, pady=(15, 0))

        # --- –ë–ª–æ–∫ –≤—ã–±–æ—Ä–∞/—Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ ---
        self.supply_frame = ctk.CTkFrame(self, fg_color="white", height=56)
        self.supply_frame.pack(fill="x", padx=0, pady=(10, 0))
        self.supply_frame.pack_propagate(False)

        self.supply_label = ctk.CTkLabel(self.supply_frame, text="ID –ø–æ—Å—Ç–∞–≤–∫–∏:", font=self.font)
        self.supply_label.pack(side="left", padx=(20, 8), pady=10)

        self.wb_supply_id_var = ctk.StringVar()
        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π id –ø–æ—Å—Ç–∞–≤–∫–∏ –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        saved_wb_supply_id = getattr(self.app_context, "wb_fbs_supply_id", "")
        self.wb_supply_id_var.set(str(saved_wb_supply_id) if saved_wb_supply_id else "")
        self.wb_supply_id_entry = ctk.CTkEntry(self.supply_frame, textvariable=self.wb_supply_id_var, font=self.font, width=200)
        self.wb_supply_id_entry.pack(side="left", padx=(5, 10), pady=10)
        self.wb_supply_id_entry.bind("<FocusIn>", self.on_wb_supply_entry_focus_in)
        self.wb_supply_id_entry.bind("<FocusOut>", self.on_wb_supply_entry_focus_out)
        self.wb_supply_id_entry.bind("<Return>", self.on_wb_supply_entry_focus_out)
        self.wb_supply_id_entry.bind("<KeyRelease>", self.on_wb_supply_entry_focus_out)

        self.create_supply_btn = ctk.CTkButton(
            self.supply_frame,
            text="–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É",
            font=self.font,
            command=self.open_create_supply_dialog,
            width=160,
            height=36
        )
        self.create_supply_btn.pack(side="left", padx=(0, 20), pady=10)

        self.supply_separator = ctk.CTkFrame(self, height=1, fg_color="#E0E0E0")
        self.supply_separator.pack(fill="x", padx=0, pady=(0, 0))

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞
        self.load_button = ctk.CTkButton(
            self,
            text="–ó–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–∫–∞–∑—ã",
            command=self.load_orders
        )
        self.load_button.pack(pady=10)

        # –°–∫—Ä—ã—Ç—ã–π Entry –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_entry = ctk.CTkEntry(self, width=200, height=1, border_width=0)
        self.scan_entry.pack(pady=0, padx=0)
        self.scan_entry.bind("<KeyRelease>", self.reset_clear_timer)
        self.scan_entry.bind("<Return>", self.handle_barcode)
        self.scan_entry.bind("<FocusIn>", self.on_entry_focus_in)
        self.scan_entry.bind("<FocusOut>", self.on_entry_focus_out)
        self.scan_entry.bind("<KeyPress>", self.handle_keypress)
        self.restore_entry_focus()

        # –ú–µ—Ç–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
        status_frame = ctk.CTkFrame(self, fg_color="transparent")
        status_frame.pack(fill="x", pady=(10, 0))
        self.scanning_label = ctk.CTkLabel(
            status_frame,
            text="–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è... üì±",
            font=("Segoe UI", 16, "bold"),
            anchor="center"
        )
        self.scanning_label.pack()

        # –õ–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.log_label = ctk.CTkLabel(
            self,
            text="",
            font=("Segoe UI", 14),
            anchor="e",
            padx=10,
            pady=5,
            corner_radius=5,
            fg_color="#CFCFCF",
            text_color="gray20",
        )
        self.log_label.place(relx=1.0, rely=0.0, anchor="ne", x=-15, y=15)
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –∫–ª–∏–∫ –¥–ª—è —Å–∫—Ä—ã—Ç–∏—è –ª–æ–≥–∞
        self.log_label.bind("<Button-1>", self.hide_log)

        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Ç–∞–±–ª–∏—Ü—ã
        self.table_container = ctk.CTkFrame(self)
        self.table_container.pack(fill="both", expand=True, padx=20, pady=10)

        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
        self.update_table()

        # --- –ë–∏–Ω–¥–∏–º –∫–ª–∏–∫ —Ç–æ–ª—å–∫–æ –Ω–∞ self –∏ table_container –¥–ª—è —Å–±—Ä–æ—Å–∞ –≤—ã–¥–µ–ª–µ–Ω–∏—è ---
        self.bind("<Button-1>", self.on_global_click, add='+')
        self.table_container.bind("<Button-1>", self.on_global_click, add='+')

    def on_global_click(self, event):
        # –ï—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ —Ç–∞–±–ª–∏—Ü–µ ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ
        if not hasattr(self, 'table') or not hasattr(self.table, 'tree'):
            return
        widget = event.widget
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∏–∫ –±—ã–ª –Ω–µ –ø–æ Treeview
        if widget is not self.table.tree and not self._is_child_of(widget, self.table.tree):
            self.clear_selection()

    def _is_child_of(self, widget, parent_widget):
        # –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ widget –ø–æ—Ç–æ–º–∫–æ–º parent_widget
        while widget is not None:
            if widget == parent_widget:
                return True
            widget = widget.master
        return False

    def clear_selection(self):
        # –°–Ω–∏–º–∞–µ—Ç –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç selected_row_index
        if hasattr(self, 'table') and hasattr(self.table, 'tree'):
            self.table.tree.selection_remove(self.table.tree.selection())
        self.selected_row_index = None

    def load_orders(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –∑–∞–∫–∞–∑—ã –∏–∑ Excel"""
        import tkinter.filedialog as fd
        file_path = fd.askopenfilename(filetypes=[("Excel files", "*.xlsx *.xls")])
        if not file_path:
            return

        try:
            df = pd.read_excel(file_path)
            required_columns = [
                "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞", "–°–ª—É–∂–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏", "–ë—Ä–µ–Ω–¥", "–¶–µ–Ω–∞",
                "–°—Ç–∞—Ç—É—Å", "–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞", "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ", "–†–∞–∑–º–µ—Ä"
            ]
            missing_cols = [col for col in required_columns if col not in df.columns]
            if missing_cols:
                self.show_log(f"–û—à–∏–±–∫–∞: –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Å—Ç–æ–ª–±—Ü—ã: {', '.join(missing_cols)}", is_error=True)
                return

            # –†–∞–∑–±–∏–≤–∞–µ–º –∫–∞–∂–¥—É—é –∑–∞–ø–∏—Å—å –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
            expanded_rows = []
            for _, row in df.iterrows():
                count = int(row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"])
                for _ in range(count):
                    new_row = row.to_dict()
                    new_row["–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ"] = 1
                    expanded_rows.append(new_row)

            new_df = pd.DataFrame(expanded_rows)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–µ –ø–æ–ª—è
            new_df["–®—Ç—Ä–∏—Ö–∫–æ–¥"] = ""
            new_df["–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"] = ""
            new_df["–ù–æ–º–µ—Ä –ø–æ—Å—Ç–∞–≤–∫–∏"] = ""
            new_df["–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] = "–ù–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω"

            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø–æ–ª–Ω—è–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if self.app_context.df is not None:
                for idx, row in new_df.iterrows():
                    # –ò—â–µ–º –ø–æ –∞—Ä—Ç–∏–∫—É–ª—É –∏ —Ä–∞–∑–º–µ—Ä—É –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ
                    matches = self.app_context.df[
                        (self.app_context.df["–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"].astype(str) == str(row["–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"])) &
                        (self.app_context.df["–†–∞–∑–º–µ—Ä"].astype(str) == str(row["–†–∞–∑–º–µ—Ä"]))
                    ]
                    if not matches.empty:
                        # –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π —à—Ç—Ä–∏—Ö–∫–æ–¥
                        barcode = matches.iloc[0]["–®—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"]
                        if pd.notna(barcode) and str(barcode).strip() != "":
                            new_df.at[idx, "–®—Ç—Ä–∏—Ö–∫–æ–¥"] = str(barcode)
                            # –¢–∞–∫–∂–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω—É—é –±–∞–∑—É
                            key = f"{row['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']}_{row['–†–∞–∑–º–µ—Ä']}"
                            self.marking_db[key] = str(barcode)

            # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏ –ø–æ "–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"
            if not self.fbs_df.empty:
                existing_orders = set(self.fbs_df["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"].unique())
                new_df = new_df[~new_df["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"].isin(existing_orders)]

            # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å —Ç–µ–∫—É—â–∏–º–∏ –¥–∞–Ω–Ω—ã–º–∏
            if self.fbs_df.empty:
                self.fbs_df = new_df
            else:
                self.fbs_df = pd.concat([self.fbs_df, new_df], ignore_index=True)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.save_data_to_context()

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.update_table()

            self.show_log(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(new_df)} –Ω–æ–≤—ã—Ö –∑–∞–∫–∞–∑–æ–≤.")
        except Exception as e:
            self.show_log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}", is_error=True)

    def update_table(self):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–∞–±–ª–∏—Ü—É —Å –∑–∞–∫–∞–∑–∞–º–∏"""
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ –≤–∏–¥–∂–µ—Ç—ã
        for widget in self.table_container.winfo_children():
            widget.destroy()

        if self.fbs_df.empty:
            empty_label = ctk.CTkLabel(self.table_container, text="–ù–µ—Ç –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤", font=("Segoe UI", 14))
            empty_label.pack(pady=20)
            return

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º EditableDataTable
        self.table = EditableDataTable(
            self.table_container,
            dataframe=self.fbs_df,
            max_rows=5000,
            header_font=("Segoe UI", 14, "bold"),
            cell_font=("Segoe UI", 14),
            readonly=False,
            on_edit_start=self.on_edit_start,
            on_edit_end=self.on_edit_end
        )
        self.table.pack(fill="both", expand=True)

        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Å—Ç—Ä–æ–∫ (—á–µ—Ä–µ–∑ Treeview –≤–Ω—É—Ç—Ä–∏ EditableDataTable)
        tree = self.table.tree
        for idx, row in self.fbs_df.iterrows():
            tag = self.get_row_status(row)
            tree.item(str(idx), tags=(tag,))
        tree.tag_configure("found", background="#FFFACD")  # –ñ–µ–ª—Ç—ã–π - –Ω–∞–π–¥–µ–Ω —à—Ç—Ä–∏—Ö–∫–æ–¥ –∏–ª–∏ —Ç–æ–≤–∞—Ä –≤ –ë–î
        tree.tag_configure("missing", background="#FFB6C1")  # –ö—Ä–∞—Å–Ω—ã–π - —Ç–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î
        tree.tag_configure("completed", background="#90EE90")  # –ó–µ–ª–µ–Ω—ã–π - –µ—Å—Ç—å –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥, –∏ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞

        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
        tree.bind("<<TreeviewSelect>>", self.on_row_select)

    def on_row_select(self, event=None):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–æ–∫–∏"""
        tree = self.table.tree
        selected_items = tree.selection()
        if not selected_items:
            self.selected_row_index = None
            return

        item = selected_items[0]
        index = int(item)
        self.selected_row_index = index
        row = self.fbs_df.loc[index]

    def get_row_status(self, row):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Ü–≤–µ—Ç–æ–≤–æ–π –∏–Ω–¥–∏–∫–∞—Ü–∏–∏"""
        # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –æ–±—Ä–∞–±–æ—Ç–∞–Ω - –∑–µ–ª–µ–Ω—ã–π (–Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –Ω–∞–ª–∏—á–∏—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏)
        if "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏" in row and row["–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] == "–û–±—Ä–∞–±–æ—Ç–∞–Ω":
            return "completed"  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –∏ —à—Ç—Ä–∏—Ö–∫–æ–¥, –∏ –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ - –∑–µ–ª–µ–Ω—ã–π
        if row["–®—Ç—Ä–∏—Ö–∫–æ–¥"] != "" and row["–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"] != "":
            return "completed"  # –ó–µ–ª–µ–Ω—ã–π —Ü–≤–µ—Ç –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ —à—Ç—Ä–∏—Ö–∫–æ–¥ - –∂–µ–ª—Ç—ã–π
        if row["–®—Ç—Ä–∏—Ö–∫–æ–¥"] != "":
            return "found"  # –ñ–µ–ª—Ç—ã–π —Ü–≤–µ—Ç –¥–ª—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —à—Ç—Ä–∏—Ö–∫–æ–¥–æ–≤
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if self.app_context.df is not None:
            matches = self.app_context.df[
                (self.app_context.df["–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"].astype(str) == str(row["–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"])) &
                (self.app_context.df["–†–∞–∑–º–µ—Ä"].astype(str) == str(row["–†–∞–∑–º–µ—Ä"]))
            ]
            if not matches.empty:
                return "found"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π –±–∞–∑–µ
        key = f"{row['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']}_{row['–†–∞–∑–º–µ—Ä']}"
        if key in self.marking_db:
            return "found"
        
        return "missing"

    def handle_barcode(self, event=None):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ –∏ –∫–æ–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        input_value = self.scan_entry.get().strip()
        if self.input_mode == "barcode":
            # –ü–µ—Ä–≤—ã–π —ç—Ç–∞–ø: –≤–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞
            self.handle_barcode_input(input_value)
        else:
            # –í—Ç–æ—Ä–æ–π —ç—Ç–∞–ø: –≤–≤–æ–¥ –∫–æ–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
            self.handle_marking_input(input_value)

    def handle_barcode_input(self, barcode):
        """ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —à—Ç—Ä–∏—Ö–∫–æ–¥–∞ """
        if self.selected_row_index is not None:
            # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞, –ø—Ä–∏–≤—è–∑—ã–≤–∞–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥ –∫ –Ω–µ–π
            row = self.fbs_df.loc[self.selected_row_index]
            key = f"{row['–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞']}_{row['–†–∞–∑–º–µ—Ä']}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —à—Ç—Ä–∏—Ö–∫–æ–¥
            self.marking_db[key] = barcode
            self.fbs_df.at[self.selected_row_index, "–®—Ç—Ä–∏—Ö–∫–æ–¥"] = barcode
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            self.save_to_main_database(row, barcode)
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.save_data_to_context()
            
            play_success_scan_sound()
            self.show_log(f"‚úÖ –®—Ç—Ä–∏—Ö–∫–æ–¥ {barcode} –ø—Ä–∏–≤—è–∑–∞–Ω. –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏...")
            
            # –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –≤–≤–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
            self.input_mode = "marking"
            self.pending_barcode = barcode
            self.scanning_label.configure(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏... üè∑Ô∏è")
            
            # –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            self.scan_entry.delete(0, "end")
            self.restore_entry_focus()     
        else:
            if not str(barcode).strip():
                self.show_log("–û—à–∏–±–∫–∞: –®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –≤–≤–µ–¥–µ–Ω", is_error=True)
                play_unsuccess_scan_sound()
                return
            
            # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞, –∏—â–µ–º –ø–æ —à—Ç—Ä–∏—Ö–∫–æ–¥—É
            matches = self.fbs_df[self.fbs_df["–®—Ç—Ä–∏—Ö–∫–æ–¥"] == barcode]
            if not matches.empty:
                # –í—ã–±–∏—Ä–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É
                for ind in range(len(matches.index)):
                    self.selected_row_index = matches.index[ind]
                    row = self.fbs_df.loc[self.selected_row_index]
                    
                    # –ï—Å–ª–∏ —Ç–æ–≤–∞—Ä —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –∏–¥–µ–º –¥–∞–ª—å—à–µ
                    if "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏" in row and row["–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] == "–û–±—Ä–∞–±–æ—Ç–∞–Ω":
                        pass
                    else:
                        # –ï—Å–ª–∏ —É —Å—Ç—Ä–æ–∫–∏ —É–∂–µ –µ—Å—Ç—å –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                        if row["–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"] != "":
                            self.show_log(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: –ó–∞–∫–∞–∑ {row['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']}, –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞: {row['–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏']}")
                            self.selected_row_index = None
                        else:
                            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏
                            self.input_mode = "marking"
                            self.pending_barcode = barcode
                            self.scanning_label.configure(text="–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏... üè∑Ô∏è")
                            self.show_log(f"–ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞: –ó–∞–∫–∞–∑ {row['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']}. –í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏...")
                        self.scan_entry.delete(0, "end")
                        self.restore_entry_focus()
                        return
                
                self.show_log("–°—Ä–æ–∫–∞ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞");
                self.scan_entry.delete(0, "end")
                self.restore_entry_focus()
                self.selected_row_index = None
            else:
                self.show_log("–û—à–∏–±–∫–∞: –®—Ç—Ä–∏—Ö–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∑–∞–∫–∞–∑–∞—Ö", is_error=True)
                play_unsuccess_scan_sound()

    def handle_marking_input(self, marking_code):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–æ–¥–∞ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"""
        if self.selected_row_index is not None:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∫–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ –≤ —Ç–∞–±–ª–∏—Ü—É
            self.fbs_df.at[self.selected_row_index, "–ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏"] = marking_code
            
            # –ü–µ—á–∞—Ç–∞–µ–º —ç—Ç–∏–∫–µ—Ç–∫—É
            row = self.fbs_df.loc[self.selected_row_index]

            # --- –ü–æ–ª—É—á–∞–µ–º –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∏–∫–µ—Ä –∑–∞–∫–∞–∑–∞ —á–µ—Ä–µ–∑ API ---
            try:
                order_id = row["–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞"]
                stickers_response = self.api.get_stickers([order_id], type="png", width=58, height=40)
                import base64
                stickers = stickers_response.get('stickers')
                if stickers and isinstance(stickers, list) and 'file' in stickers[0]:
                    b64data = stickers[0]['file']
                    img_bytes = base64.b64decode(b64data)
                    filename = f"sticker_{order_id}.png"
                    with open(filename, "wb") as f:
                        f.write(img_bytes)
                    self.show_log(f"–°—Ç–∏–∫–µ—Ä –∑–∞–∫–∞–∑–∞ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {filename}")
                    # --- –ü–µ—á–∞—Ç—å —ç—Ç–∏–∫–µ—Ç–∫–∏ ---
                    self.label_printer.print_on_windows(image_path=filename)
                else:
                    self.show_log("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–∏–∫–µ—Ä –∑–∞–∫–∞–∑–∞", is_error=True)
            except Exception as e:
                self.show_log(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∏–∫–µ—Ä–∞: {e}", is_error=True)

            # –ü–æ–º–µ—á–∞–µ–º —Ç–æ–≤–∞—Ä –∫–∞–∫ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π
            self.fbs_df.at[self.selected_row_index, "–°—Ç–∞—Ç—É—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏"] = "–û–±—Ä–∞–±–æ—Ç–∞–Ω"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç
            self.save_data_to_context()
            
            play_success_scan_sound()
            self.show_log(f"‚úÖ –ö–æ–¥ –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏ {marking_code} –ø—Ä–∏–≤—è–∑–∞–Ω –∫ –∑–∞–∫–∞–∑—É {row['–ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞']}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.update_table()
            
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self.selected_row_index = None
            self.input_mode = "barcode"
            self.pending_barcode = None
            self.scanning_label.configure(text="–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è... üì±")
            
            self.scan_entry.delete(0, "end")
            self.restore_entry_focus()
        else:
            self.show_log("–û—à–∏–±–∫–∞: –ù–µ –≤—ã–±—Ä–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞ –¥–ª—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∏", is_error=True)
            play_unsuccess_scan_sound()

    def save_to_main_database(self, row, barcode):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —à—Ç—Ä–∏—Ö–∫–æ–¥ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.app_context.df is None:
            return
            
        # –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
        matches = self.app_context.df[
            (self.app_context.df["–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"].astype(str) == str(row["–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"])) &
            (self.app_context.df["–†–∞–∑–º–µ—Ä"].astype(str) == str(row["–†–∞–∑–º–µ—Ä"]))
        ]
        
        if not matches.empty:
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
            idx = matches.index[0]
            self.app_context.df.at[idx, "–®—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è"] = barcode
        else:
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
            new_row = pd.DataFrame([{
                "–ê—Ä—Ç–∏–∫—É–ª –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è": row["–ê—Ä—Ç–∏–∫—É–ª –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞"],
                "–†–∞–∑–º–µ—Ä": row["–†–∞–∑–º–µ—Ä"],
                "–®—Ç—Ä–∏—Ö–∫–æ–¥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—è": barcode,
                "–ù–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞–≤—â–∏–∫–∞": row.get("–ë—Ä–µ–Ω–¥", ""),
                "–ë—Ä–µ–Ω–¥": row.get("–ë—Ä–µ–Ω–¥", "")
            }])
            self.app_context.df = pd.concat([self.app_context.df, new_row], ignore_index=True)

    def save_to_database(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        if self.app_context.df is None:
            messagebox.showwarning("–û—à–∏–±–∫–∞", "–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
            return
            
        try:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Excel —Ñ–∞–π–ª
            if self.app_context.file_path:
                self.app_context.df.to_excel(self.app_context.file_path, index=False)
                self.show_log("‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –æ—Å–Ω–æ–≤–Ω—É—é –±–∞–∑—É")
            else:
                self.show_log("‚ö†Ô∏è –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –Ω–µ —É–∫–∞–∑–∞–Ω", is_error=True)
        except Exception as e:
            self.show_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", is_error=True)

    def show_log(self, message, is_error=False):
        """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥–µ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–∫—Ä—ã—Ç–∏–µ–º"""
        # –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä
        if self.log_timer_id:
            self.after_cancel(self.log_timer_id)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        if is_error:
            self.log_label.configure(
                text=message,
                fg_color="#FFE0E0",
                text_color="red"
            )
        else:
            self.log_label.configure(
                text=message,
                fg_color="gray85",
                text_color="gray20"
            )
        
        self.log_label.lift()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–∫—Ä—ã—Ç–∏—è
        if is_error:
            # –û—à–∏–±–∫–∏ —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
            self.log_timer_id = self.after(5000, self.hide_log)
        else:
            # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–∫—Ä—ã–≤–∞—é—Ç—Å—è —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã
            self.log_timer_id = self.after(3000, self.hide_log)

    def hide_log(self, event=None):
        """–°–∫—Ä—ã–≤–∞–µ—Ç –ª–æ–≥ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        self.log_label.configure(text="", fg_color="#CFCFCF")
        if self.log_timer_id:
            self.after_cancel(self.log_timer_id)
            self.log_timer_id = None

    def restore_entry_focus(self, event=None):
        if self.editing:
            return
        self.scan_entry.focus_set()
        self.focus_timer_id = self.after(100, self.restore_entry_focus)

    def on_entry_focus_in(self, event=None):
        if not self.editing:
            self.scanning_label.configure(text="–û–∂–∏–¥–∞–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è... üì±")

    def on_entry_focus_out(self, event=None):
        if not self.editing:
            self.scanning_label.configure(text="")

    def reset_clear_timer(self, event=None):
        if self.clear_timer_id:
            self.after_cancel(self.clear_timer_id)
        self.clear_timer_id = self.after(1000, self.clear_entry)

    def clear_entry(self):
        self.scan_entry.delete(0, "end")

    def handle_keypress(self, event=None):
        if self.table:
            self.table.on_keypress(event)

    def on_edit_start(self):
        self.editing = True
        if self.focus_timer_id:
            self.after_cancel(self.focus_timer_id)

    def on_edit_end(self):
        self.editing = False
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ self.fbs_df –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç
        self.fbs_df = self.table.displayed_df.copy()
        self.save_data_to_context()
        self.start_auto_focus()

    def start_auto_focus(self):
        if self.focus_timer_id:
            self.after_cancel(self.focus_timer_id)
        self.restore_entry_focus()

    def save_data_to_context(self):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        try:
            self.app_context.fbs_table = self.fbs_df.copy()
            wb_supply_id = self.wb_supply_id_entry.get().strip()
            print(f"[DEBUG] save_data_to_context: —Å–æ—Ö—Ä–∞–Ω—è—é wb_fbs_supply_id = '{wb_supply_id}'")
            self.show_log(f"–°–æ—Ö—Ä–∞–Ω—è—é id –ø–æ—Å—Ç–∞–≤–∫–∏ WB: {wb_supply_id}")
            self.app_context.wb_fbs_supply_id = wb_supply_id
        except Exception as e:
            self.show_log(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}", is_error=True)

    # –£–¥–∞–ª—è—é —Ñ—É–Ω–∫—Ü–∏—é load_supplies –∏ –≤—Å–µ –µ—ë –≤—ã–∑–æ–≤—ã
    # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏ —Å–æ—Ö—Ä–∞–Ω—è—é id —Å—Ä–∞–∑—É
    def open_create_supply_dialog(self):
        self.editing = True
        default_name = f"–ü–æ—Å—Ç–∞–≤–∫–∞ –æ—Ç {datetime.now().strftime('%d.%m.%Y')}"
        import easygui as eg
        name = eg.enterbox("–°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–∫—É", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ—Å—Ç–∞–≤–∫–∏:", default=default_name)
        if name:
            result = self.create_supply(name)
            if result and 'id' in result:
                self.wb_supply_id_var.set(str(result['id']))
                self.save_data_to_context()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è
        self.editing = False
        self.start_auto_focus()

    def create_supply(self, name):
        try:
            result = self.api.create_supply(name)
            self.show_log(f"–ü–æ—Å—Ç–∞–≤–∫–∞ —Å–æ–∑–¥–∞–Ω–∞: {result.get('name', name)}")
            return result
        except Exception as e:
            self.show_log(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞–≤–∫–∏: {e}", is_error=True)
            return None

    def on_wb_supply_entry_focus_in(self, event=None):
        self.editing = True

    def on_wb_supply_entry_focus_out(self, event=None):
        self.editing = False
        self.start_auto_focus()
